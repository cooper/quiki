{"css":"/* Background */ .bg { color: #272822; background-color: #fafafa; }\n/* PreWrapper */ .chroma { color: #272822; background-color: #fafafa; }\n/* Error */ .chroma .err { color: #960050; background-color: #1e0010 }\n/* LineLink */ .chroma .lnlinks { outline: none; text-decoration: none; color: inherit }\n/* LineTableTD */ .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; }\n/* LineTable */ .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; }\n/* LineHighlight */ .chroma .hl { background-color: #e1e1e1 }\n/* LineNumbersTable */ .chroma .lnt { white-space: pre; -webkit-user-select: none; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* LineNumbers */ .chroma .ln { white-space: pre; -webkit-user-select: none; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* Line */ .chroma .line { display: flex; }\n/* Keyword */ .chroma .k { color: #00a8c8 }\n/* KeywordConstant */ .chroma .kc { color: #00a8c8 }\n/* KeywordDeclaration */ .chroma .kd { color: #00a8c8 }\n/* KeywordNamespace */ .chroma .kn { color: #f92672 }\n/* KeywordPseudo */ .chroma .kp { color: #00a8c8 }\n/* KeywordReserved */ .chroma .kr { color: #00a8c8 }\n/* KeywordType */ .chroma .kt { color: #00a8c8 }\n/* Name */ .chroma .n { color: #111111 }\n/* NameAttribute */ .chroma .na { color: #75af00 }\n/* NameBuiltin */ .chroma .nb { color: #111111 }\n/* NameBuiltinPseudo */ .chroma .bp { color: #111111 }\n/* NameClass */ .chroma .nc { color: #75af00 }\n/* NameConstant */ .chroma .no { color: #00a8c8 }\n/* NameDecorator */ .chroma .nd { color: #75af00 }\n/* NameEntity */ .chroma .ni { color: #111111 }\n/* NameException */ .chroma .ne { color: #75af00 }\n/* NameFunction */ .chroma .nf { color: #75af00 }\n/* NameFunctionMagic */ .chroma .fm { color: #111111 }\n/* NameLabel */ .chroma .nl { color: #111111 }\n/* NameNamespace */ .chroma .nn { color: #111111 }\n/* NameOther */ .chroma .nx { color: #75af00 }\n/* NameProperty */ .chroma .py { color: #111111 }\n/* NameTag */ .chroma .nt { color: #f92672 }\n/* NameVariable */ .chroma .nv { color: #111111 }\n/* NameVariableClass */ .chroma .vc { color: #111111 }\n/* NameVariableGlobal */ .chroma .vg { color: #111111 }\n/* NameVariableInstance */ .chroma .vi { color: #111111 }\n/* NameVariableMagic */ .chroma .vm { color: #111111 }\n/* Literal */ .chroma .l { color: #ae81ff }\n/* LiteralDate */ .chroma .ld { color: #d88200 }\n/* LiteralString */ .chroma .s { color: #d88200 }\n/* LiteralStringAffix */ .chroma .sa { color: #d88200 }\n/* LiteralStringBacktick */ .chroma .sb { color: #d88200 }\n/* LiteralStringChar */ .chroma .sc { color: #d88200 }\n/* LiteralStringDelimiter */ .chroma .dl { color: #d88200 }\n/* LiteralStringDoc */ .chroma .sd { color: #d88200 }\n/* LiteralStringDouble */ .chroma .s2 { color: #d88200 }\n/* LiteralStringEscape */ .chroma .se { color: #8045ff }\n/* LiteralStringHeredoc */ .chroma .sh { color: #d88200 }\n/* LiteralStringInterpol */ .chroma .si { color: #d88200 }\n/* LiteralStringOther */ .chroma .sx { color: #d88200 }\n/* LiteralStringRegex */ .chroma .sr { color: #d88200 }\n/* LiteralStringSingle */ .chroma .s1 { color: #d88200 }\n/* LiteralStringSymbol */ .chroma .ss { color: #d88200 }\n/* LiteralNumber */ .chroma .m { color: #ae81ff }\n/* LiteralNumberBin */ .chroma .mb { color: #ae81ff }\n/* LiteralNumberFloat */ .chroma .mf { color: #ae81ff }\n/* LiteralNumberHex */ .chroma .mh { color: #ae81ff }\n/* LiteralNumberInteger */ .chroma .mi { color: #ae81ff }\n/* LiteralNumberIntegerLong */ .chroma .il { color: #ae81ff }\n/* LiteralNumberOct */ .chroma .mo { color: #ae81ff }\n/* Operator */ .chroma .o { color: #f92672 }\n/* OperatorWord */ .chroma .ow { color: #f92672 }\n/* Punctuation */ .chroma .p { color: #111111 }\n/* Comment */ .chroma .c { color: #75715e }\n/* CommentHashbang */ .chroma .ch { color: #75715e }\n/* CommentMultiline */ .chroma .cm { color: #75715e }\n/* CommentSingle */ .chroma .c1 { color: #75715e }\n/* CommentSpecial */ .chroma .cs { color: #75715e }\n/* CommentPreproc */ .chroma .cp { color: #75715e }\n/* CommentPreprocFile */ .chroma .cpf { color: #75715e }\n/* GenericEmph */ .chroma .ge { font-style: italic }\n/* GenericStrong */ .chroma .gs { font-weight: bold }\n\n","file":"doc/technical/markdown.md","file_ne":"doc/technical/markdown","created":"2025-03-01T14:37:54.153779963-05:00","modified":"2025-03-01T14:37:54.153779963-05:00","generated":true,"external":true,"fmt_title":"markdown","title":"markdown","author":"Markdown","preview":"Contents markdown Usage func  Run type QuikiFlags type QuikiRenderer func  NewQuikiRenderer func (*QuikiRenderer) RenderFooter func (*QuikiRenderer)"}
<div class="q-main-doc/technical/markdown q-main">
    <ul class="q-toc">
        <li><strong>Contents</strong></li>
        <li>
            <a class="q-link-internal" href="#markdown">
                markdown
            </a>
            <ul>
                <li>
                    <a class="q-link-internal" href="#usage">
                        Usage
                    </a>
                    <ul>
                        <li>
                            <a class="q-link-internal" href="#func--run">
                                func  Run
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-quikiflags">
                                type QuikiFlags
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-quikirenderer">
                                type QuikiRenderer
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newquikirenderer">
                                func  NewQuikiRenderer
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-quikirenderer-renderfooter">
                                func (*QuikiRenderer) RenderFooter
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-quikirenderer-renderheader">
                                func (*QuikiRenderer) RenderHeader
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-quikirenderer-rendernode">
                                func (*QuikiRenderer) RenderNode
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-quikirendererparameters">
                                type QuikiRendererParameters
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
    <div class="q-sec">
        <h1 class="q-sec-title" id="qa-markdown">
            markdown
        </h1>
        <p class="q-p">
            --
        </p>
<pre class="q-code chroma"><span class="line"><span class="cl">import &#34;.&#34;
</span></span></pre>
        <p class="q-p">
            Package markdown translates Markdown to quiki source code.
        </p>
        <div class="q-sec">
            <h2 class="q-sec-title" id="qa-usage">
                Usage
            </h2>
            <div class="q-sec">
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--run">
                        func  Run
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">input</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span></pre>
                    <p class="q-p">
                        Run parses Markdown and renders quiki soure code.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-quikiflags">
                        type QuikiFlags
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">QuikiFlags</span> <span class="kt">int</span>
</span></span></pre>
                    <p class="q-p">
                        QuikiFlags is renderer configuration options.
                    </p>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">QuikiFlagsNone</span>      <span class="nx">QuikiFlags</span> <span class="p">=</span> <span class="mi">0</span>         <span class="c1">// No flags</span>
</span></span><span class="line"><span class="cl">	<span class="nx">SkipHTML</span>            <span class="nx">QuikiFlags</span> <span class="p">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="kc">iota</span> <span class="c1">// Skip preformatted HTML blocks</span>
</span></span><span class="line"><span class="cl">	<span class="nx">SkipImages</span>                                 <span class="c1">// Skip embedded images</span>
</span></span><span class="line"><span class="cl">	<span class="nx">SkipLinks</span>                                  <span class="c1">// Skip all links</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PartialPage</span>                                <span class="c1">// If true, no @page vars at start</span>
</span></span><span class="line"><span class="cl">	<span class="nx">TableOfContents</span>                            <span class="c1">// If true, include TOC</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FootnoteReturnLinks</span>                        <span class="c1">// Generate a link at the end of a footnote to return to the source</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        QuikiFlags configuration options.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-quikirenderer">
                        type QuikiRenderer
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">QuikiRenderer</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">QuikiRendererParameters</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        QuikiRenderer is a type that implements the Renderer interface for quiki source
                        code output.
                    </p>
                    <p class="q-p">
                        Do not create this directly, instead use the NewQuikiRenderer function.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newquikirenderer">
                        func  NewQuikiRenderer
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewQuikiRenderer</span><span class="p">(</span><span class="nx">params</span> <span class="nx">QuikiRendererParameters</span><span class="p">)</span> <span class="o">*</span><span class="nx">QuikiRenderer</span>
</span></span></pre>
                    <p class="q-p">
                        NewQuikiRenderer creates and configures a QuikiRenderer object, which satisfies
                        the Renderer interface.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-quikirenderer-renderfooter">
                        func (*QuikiRenderer) RenderFooter
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">QuikiRenderer</span><span class="p">)</span> <span class="nf">RenderFooter</span><span class="p">(</span><span class="nx">w</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">,</span> <span class="nx">ast</span> <span class="o">*</span><span class="nx">blackfriday</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        RenderFooter renders the page footer.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-quikirenderer-renderheader">
                        func (*QuikiRenderer) RenderHeader
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">QuikiRenderer</span><span class="p">)</span> <span class="nf">RenderHeader</span><span class="p">(</span><span class="nx">w</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">,</span> <span class="nx">ast</span> <span class="o">*</span><span class="nx">blackfriday</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        RenderHeader renders the page header, which includes @page variable definitions.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-quikirenderer-rendernode">
                        func (*QuikiRenderer) RenderNode
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">QuikiRenderer</span><span class="p">)</span> <span class="nf">RenderNode</span><span class="p">(</span><span class="nx">w</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">,</span> <span class="nx">node</span> <span class="o">*</span><span class="nx">blackfriday</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">entering</span> <span class="kt">bool</span><span class="p">)</span> <span class="nx">blackfriday</span><span class="p">.</span><span class="nx">WalkStatus</span>
</span></span></pre>
                    <p class="q-p">
                        RenderNode is a default renderer of a single node of a syntax tree. For block
                        nodes it will be called twice: first time with entering=true, second time with
                        entering=false, so that it could know when it&#39;s working on an open tag and when
                        on close. It writes the result to w.
                    </p>
                    <p class="q-p">
                        The return value is a way to tell the calling walker to adjust its walk pattern:
                        e.g. it can terminate the traversal by returning Terminate. Or it can ask the
                        walker to skip a subtree of this node by returning SkipChildren. The typical
                        behavior is to return GoToNext, which asks for the usual traversal to the next
                        node.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-quikirendererparameters">
                        type QuikiRendererParameters
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">QuikiRendererParameters</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// path to prepend to relative URLs</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AbsolutePrefix</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// add this text to each footnote anchor, to ensure uniqueness.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FootnoteAnchorPrefix</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Show this text inside the &lt;a&gt; tag for a footnote return link, if the</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// HTML_FOOTNOTE_RETURN_LINKS flag is enabled. If blank, the string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// &lt;sup&gt;[return]&lt;/sup&gt; is used.</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FootnoteReturnLinkContents</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If set, add this text to the front of each Heading ID, to ensure</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// uniqueness.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">HeadingIDPrefix</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If set, add this text to the back of each Heading ID, to ensure uniqueness.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">HeadingIDSuffix</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Increase heading levels: if the offset is 1, &lt;h1&gt; becomes &lt;h2&gt; etc.</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Negative offset is also valid.</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Resulting levels are clipped between 1 and 6.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">HeadingLevelOffset</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// page title. defaults to the first heading in the document</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Title</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// flags to customize the renderer&#39;s behavior</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Flags</span> <span class="nx">QuikiFlags</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        QuikiRendererParameters allows you to tweak the behavior of a QuikiRenderer.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
