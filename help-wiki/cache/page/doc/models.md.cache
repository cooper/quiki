{"css":"/* Background */ .bg { color: #272822; background-color: #fafafa }\n/* PreWrapper */ .chroma { color: #272822; background-color: #fafafa; }\n/* Error */ .chroma .err { color: #960050; background-color: #1e0010 }\n/* LineTableTD */ .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; }\n/* LineTable */ .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; }\n/* LineHighlight */ .chroma .hl { background-color: #e1e1e1 }\n/* LineNumbersTable */ .chroma .lnt { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* LineNumbers */ .chroma .ln { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* Line */ .chroma .line { display: flex; }\n/* Keyword */ .chroma .k { color: #00a8c8 }\n/* KeywordConstant */ .chroma .kc { color: #00a8c8 }\n/* KeywordDeclaration */ .chroma .kd { color: #00a8c8 }\n/* KeywordNamespace */ .chroma .kn { color: #f92672 }\n/* KeywordPseudo */ .chroma .kp { color: #00a8c8 }\n/* KeywordReserved */ .chroma .kr { color: #00a8c8 }\n/* KeywordType */ .chroma .kt { color: #00a8c8 }\n/* Name */ .chroma .n { color: #111111 }\n/* NameAttribute */ .chroma .na { color: #75af00 }\n/* NameBuiltin */ .chroma .nb { color: #111111 }\n/* NameBuiltinPseudo */ .chroma .bp { color: #111111 }\n/* NameClass */ .chroma .nc { color: #75af00 }\n/* NameConstant */ .chroma .no { color: #00a8c8 }\n/* NameDecorator */ .chroma .nd { color: #75af00 }\n/* NameEntity */ .chroma .ni { color: #111111 }\n/* NameException */ .chroma .ne { color: #75af00 }\n/* NameFunction */ .chroma .nf { color: #75af00 }\n/* NameFunctionMagic */ .chroma .fm { color: #111111 }\n/* NameLabel */ .chroma .nl { color: #111111 }\n/* NameNamespace */ .chroma .nn { color: #111111 }\n/* NameOther */ .chroma .nx { color: #75af00 }\n/* NameProperty */ .chroma .py { color: #111111 }\n/* NameTag */ .chroma .nt { color: #f92672 }\n/* NameVariable */ .chroma .nv { color: #111111 }\n/* NameVariableClass */ .chroma .vc { color: #111111 }\n/* NameVariableGlobal */ .chroma .vg { color: #111111 }\n/* NameVariableInstance */ .chroma .vi { color: #111111 }\n/* NameVariableMagic */ .chroma .vm { color: #111111 }\n/* Literal */ .chroma .l { color: #ae81ff }\n/* LiteralDate */ .chroma .ld { color: #d88200 }\n/* LiteralString */ .chroma .s { color: #d88200 }\n/* LiteralStringAffix */ .chroma .sa { color: #d88200 }\n/* LiteralStringBacktick */ .chroma .sb { color: #d88200 }\n/* LiteralStringChar */ .chroma .sc { color: #d88200 }\n/* LiteralStringDelimiter */ .chroma .dl { color: #d88200 }\n/* LiteralStringDoc */ .chroma .sd { color: #d88200 }\n/* LiteralStringDouble */ .chroma .s2 { color: #d88200 }\n/* LiteralStringEscape */ .chroma .se { color: #8045ff }\n/* LiteralStringHeredoc */ .chroma .sh { color: #d88200 }\n/* LiteralStringInterpol */ .chroma .si { color: #d88200 }\n/* LiteralStringOther */ .chroma .sx { color: #d88200 }\n/* LiteralStringRegex */ .chroma .sr { color: #d88200 }\n/* LiteralStringSingle */ .chroma .s1 { color: #d88200 }\n/* LiteralStringSymbol */ .chroma .ss { color: #d88200 }\n/* LiteralNumber */ .chroma .m { color: #ae81ff }\n/* LiteralNumberBin */ .chroma .mb { color: #ae81ff }\n/* LiteralNumberFloat */ .chroma .mf { color: #ae81ff }\n/* LiteralNumberHex */ .chroma .mh { color: #ae81ff }\n/* LiteralNumberInteger */ .chroma .mi { color: #ae81ff }\n/* LiteralNumberIntegerLong */ .chroma .il { color: #ae81ff }\n/* LiteralNumberOct */ .chroma .mo { color: #ae81ff }\n/* Operator */ .chroma .o { color: #f92672 }\n/* OperatorWord */ .chroma .ow { color: #f92672 }\n/* Punctuation */ .chroma .p { color: #111111 }\n/* Comment */ .chroma .c { color: #75715e }\n/* CommentHashbang */ .chroma .ch { color: #75715e }\n/* CommentMultiline */ .chroma .cm { color: #75715e }\n/* CommentSingle */ .chroma .c1 { color: #75715e }\n/* CommentSpecial */ .chroma .cs { color: #75715e }\n/* CommentPreproc */ .chroma .cp { color: #75715e }\n/* CommentPreprocFile */ .chroma .cpf { color: #75715e }\n/* GenericEmph */ .chroma .ge { font-style: italic }\n/* GenericStrong */ .chroma .gs { font-weight: bold }\n\n","file":"doc/models.md","file_ne":"doc/models","created":"2025-02-23T09:41:58.236013272-05:00","modified":"2025-02-23T09:41:58.236013272-05:00","generated":true,"external":true,"fmt_title":"Models","title":"Models","author":"Markdown","preview":"Contents Models Creating models Using models Models Models are pieces of quiki source code that can be borrowed by multiple pages. This allows you to","warnings":[{"message":"No such code{} style 'monokailight' (from config)","position":[47,7]},{"message":"No such code{} style 'monokailight' (from config)","position":[63,7]}]}
<div class="q-main-doc/models q-main">
    <ul class="q-toc">
        <li><strong>Contents</strong></li>
        <li>
            <a class="q-link-internal" href="#models">
                Models
            </a>
            <ul>
                <li>
                    <a class="q-link-internal" href="#creating-models">
                        Creating models
                    </a>
                </li>
                <li>
                    <a class="q-link-internal" href="#using-models">
                        Using models
                    </a>
                </li>
            </ul>
        </li>
    </ul>
    <div class="q-sec">
        <h1 class="q-sec-title" id="qa-models">
            Models
        </h1>
        <p class="q-p">
            Models are pieces of quiki source code that can be borrowed by multiple pages.
            This allows you to create reusable templates for consistency across your wiki
            and eliminate repetitious page source code.
        </p>
        <ul class="q-list">
            <li class="q-list-item">
                <a class="q-link-internal" href="#models" title="§ models">Models</a>
                <ul class="q-list">
                    <li class="q-list-item">
                        <a class="q-link-internal" href="#creating-models" title="§ creating-models">Creating models</a>
                    </li>
                    <li class="q-list-item">
                        <a class="q-link-internal" href="#using-models" title="§ using-models">Using models</a>
                    </li>
                </ul>
            </li>
        </ul>
        <div class="q-sec">
            <h2 class="q-sec-title" id="qa-creating-models">
                Creating models
            </h2>
            <p class="q-p">
                For safety, you cannot include any old page file into another. Instead, models are
                stored in a dedicated <code>models</code> directory within the wiki root.
            </p>
            <p class="q-p">
                Model source files can contain any quiki code, but it is common to use them
                in conjunction with <a class="q-link-internal" href="/pagereplace/doc/blocks#html" title="blocks § html"><code>html{}</code></a> or <a class="q-link-internal" href="/pagereplace/doc/blocks#format" title="blocks § format"><code>format{}</code></a>
                to make HTML templates. The result is that your actual page files are far less
                cluttered, with all the ugly HTML hidden behind a model.
            </p>
            <p class="q-p">
                Inside the model source file, the special variable <code>@m</code> refers to any key-value
                options provided to the model from the main page.
            </p>
        </div>
        <div class="q-sec">
            <h2 class="q-sec-title" id="qa-using-models">
                Using models
            </h2>
            <p class="q-p">
                quiki has a special syntax for using models. Write them like any block,
                except prefix the model name with a dollar sign (<code>$</code>).
            </p>
<pre class="q-code chroma"><span class="line"><span class="cl">$my_model {
</span></span><span class="line"><span class="cl">    option1: Something;
</span></span><span class="line"><span class="cl">    option2: Another option;
</span></span><span class="line"><span class="cl">}
</span></span></pre>
            <p class="q-p">
                Note: From within the model source, those options can be retrieved with
                <code>@m.option1</code> and <code>@m.option2</code>.
            </p>
            <p class="q-p">
                This convenient syntax is the same as writing the long form:
            </p>
<pre class="q-code chroma"><span class="line"><span class="cl">model [my_model] {
</span></span><span class="line"><span class="cl">    option1: Something;
</span></span><span class="line"><span class="cl">    option2: Another option;
</span></span><span class="line"><span class="cl">}
</span></span></pre>
        </div>
    </div>
</div>
