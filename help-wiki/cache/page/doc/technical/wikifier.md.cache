{"css":"/* Background */ .bg { color: #272822; background-color: #fafafa; }\n/* PreWrapper */ .chroma { color: #272822; background-color: #fafafa; }\n/* Error */ .chroma .err { color: #960050; background-color: #1e0010 }\n/* LineLink */ .chroma .lnlinks { outline: none; text-decoration: none; color: inherit }\n/* LineTableTD */ .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; }\n/* LineTable */ .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; }\n/* LineHighlight */ .chroma .hl { background-color: #e1e1e1 }\n/* LineNumbersTable */ .chroma .lnt { white-space: pre; -webkit-user-select: none; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* LineNumbers */ .chroma .ln { white-space: pre; -webkit-user-select: none; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* Line */ .chroma .line { display: flex; }\n/* Keyword */ .chroma .k { color: #00a8c8 }\n/* KeywordConstant */ .chroma .kc { color: #00a8c8 }\n/* KeywordDeclaration */ .chroma .kd { color: #00a8c8 }\n/* KeywordNamespace */ .chroma .kn { color: #f92672 }\n/* KeywordPseudo */ .chroma .kp { color: #00a8c8 }\n/* KeywordReserved */ .chroma .kr { color: #00a8c8 }\n/* KeywordType */ .chroma .kt { color: #00a8c8 }\n/* Name */ .chroma .n { color: #111111 }\n/* NameAttribute */ .chroma .na { color: #75af00 }\n/* NameBuiltin */ .chroma .nb { color: #111111 }\n/* NameBuiltinPseudo */ .chroma .bp { color: #111111 }\n/* NameClass */ .chroma .nc { color: #75af00 }\n/* NameConstant */ .chroma .no { color: #00a8c8 }\n/* NameDecorator */ .chroma .nd { color: #75af00 }\n/* NameEntity */ .chroma .ni { color: #111111 }\n/* NameException */ .chroma .ne { color: #75af00 }\n/* NameFunction */ .chroma .nf { color: #75af00 }\n/* NameFunctionMagic */ .chroma .fm { color: #111111 }\n/* NameLabel */ .chroma .nl { color: #111111 }\n/* NameNamespace */ .chroma .nn { color: #111111 }\n/* NameOther */ .chroma .nx { color: #75af00 }\n/* NameProperty */ .chroma .py { color: #111111 }\n/* NameTag */ .chroma .nt { color: #f92672 }\n/* NameVariable */ .chroma .nv { color: #111111 }\n/* NameVariableClass */ .chroma .vc { color: #111111 }\n/* NameVariableGlobal */ .chroma .vg { color: #111111 }\n/* NameVariableInstance */ .chroma .vi { color: #111111 }\n/* NameVariableMagic */ .chroma .vm { color: #111111 }\n/* Literal */ .chroma .l { color: #ae81ff }\n/* LiteralDate */ .chroma .ld { color: #d88200 }\n/* LiteralString */ .chroma .s { color: #d88200 }\n/* LiteralStringAffix */ .chroma .sa { color: #d88200 }\n/* LiteralStringBacktick */ .chroma .sb { color: #d88200 }\n/* LiteralStringChar */ .chroma .sc { color: #d88200 }\n/* LiteralStringDelimiter */ .chroma .dl { color: #d88200 }\n/* LiteralStringDoc */ .chroma .sd { color: #d88200 }\n/* LiteralStringDouble */ .chroma .s2 { color: #d88200 }\n/* LiteralStringEscape */ .chroma .se { color: #8045ff }\n/* LiteralStringHeredoc */ .chroma .sh { color: #d88200 }\n/* LiteralStringInterpol */ .chroma .si { color: #d88200 }\n/* LiteralStringOther */ .chroma .sx { color: #d88200 }\n/* LiteralStringRegex */ .chroma .sr { color: #d88200 }\n/* LiteralStringSingle */ .chroma .s1 { color: #d88200 }\n/* LiteralStringSymbol */ .chroma .ss { color: #d88200 }\n/* LiteralNumber */ .chroma .m { color: #ae81ff }\n/* LiteralNumberBin */ .chroma .mb { color: #ae81ff }\n/* LiteralNumberFloat */ .chroma .mf { color: #ae81ff }\n/* LiteralNumberHex */ .chroma .mh { color: #ae81ff }\n/* LiteralNumberInteger */ .chroma .mi { color: #ae81ff }\n/* LiteralNumberIntegerLong */ .chroma .il { color: #ae81ff }\n/* LiteralNumberOct */ .chroma .mo { color: #ae81ff }\n/* Operator */ .chroma .o { color: #f92672 }\n/* OperatorWord */ .chroma .ow { color: #f92672 }\n/* Punctuation */ .chroma .p { color: #111111 }\n/* Comment */ .chroma .c { color: #75715e }\n/* CommentHashbang */ .chroma .ch { color: #75715e }\n/* CommentMultiline */ .chroma .cm { color: #75715e }\n/* CommentSingle */ .chroma .c1 { color: #75715e }\n/* CommentSpecial */ .chroma .cs { color: #75715e }\n/* CommentPreproc */ .chroma .cp { color: #75715e }\n/* CommentPreprocFile */ .chroma .cpf { color: #75715e }\n/* GenericEmph */ .chroma .ge { font-style: italic }\n/* GenericStrong */ .chroma .gs { font-weight: bold }\n\n","file":"doc/technical/wikifier.md","file_ne":"doc/technical/wikifier","created":"2025-02-23T13:47:47.582599144-05:00","modified":"2025-02-23T13:47:47.582599144-05:00","generated":true,"external":true,"fmt_title":"wikifier","title":"wikifier","author":"Markdown","preview":"Contents wikifier Usage func  CategoryName func  CategoryNameNE func  InjectPageOpt func  MakeDir func  ModelName func  PageName func  PageNameExt"}
<div class="q-main-doc/technical/wikifier q-main">
    <ul class="q-toc">
        <li><strong>Contents</strong></li>
        <li>
            <a class="q-link-internal" href="#wikifier">
                wikifier
            </a>
            <ul>
                <li>
                    <a class="q-link-internal" href="#usage">
                        Usage
                    </a>
                    <ul>
                        <li>
                            <a class="q-link-internal" href="#func--categoryname">
                                func  CategoryName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--categorynamene">
                                func  CategoryNameNE
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--injectpageopt">
                                func  InjectPageOpt
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--makedir">
                                func  MakeDir
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--modelname">
                                func  ModelName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--pagename">
                                func  PageName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--pagenameext">
                                func  PageNameExt
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--pagenamelink">
                                func  PageNameLink
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--pagenamene">
                                func  PageNameNE
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--scalestring">
                                func  ScaleString
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--uniquefilesindir">
                                func  UniqueFilesInDir
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-attributedobject">
                                type AttributedObject
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-fmtopt">
                                type FmtOpt
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-html">
                                type HTML
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-list">
                                type List
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newlist">
                                func  NewList
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-get">
                                func (List) Get
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-getblock">
                                func (List) GetBlock
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-getbool">
                                func (List) GetBool
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-getobj">
                                func (List) GetObj
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-getstr">
                                func (List) GetStr
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-getstrlist">
                                func (List) GetStrList
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-set">
                                func (List) Set
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-string">
                                func (List) String
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-list-unset">
                                func (List) Unset
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-map">
                                type Map
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newmap">
                                func  NewMap
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-get">
                                func (Map) Get
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-getblock">
                                func (Map) GetBlock
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-getbool">
                                func (Map) GetBool
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-getobj">
                                func (Map) GetObj
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-getstr">
                                func (Map) GetStr
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-getstrlist">
                                func (Map) GetStrList
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-keys">
                                func (*Map) Keys
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-map">
                                func (*Map) Map
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-orderedkeys">
                                func (*Map) OrderedKeys
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-set">
                                func (Map) Set
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-string">
                                func (Map) String
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-map-unset">
                                func (Map) Unset
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-modelinfo">
                                type ModelInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-page">
                                type Page
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newpage">
                                func  NewPage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newpagepath">
                                func  NewPagePath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newpagesource">
                                func  NewPageSource
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-author">
                                func (*Page) Author
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-css">
                                func (*Page) CSS
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-cacheexists">
                                func (*Page) CacheExists
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-cachemodified">
                                func (*Page) CacheModified
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-cachepath">
                                func (*Page) CachePath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-categories">
                                func (*Page) Categories
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-created">
                                func (*Page) Created
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-description">
                                func (*Page) Description
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-draft">
                                func (*Page) Draft
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-exists">
                                func (*Page) Exists
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-external">
                                func (*Page) External
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-fmttitle">
                                func (*Page) FmtTitle
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-generated">
                                func (*Page) Generated
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-get">
                                func (Page) Get
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-getblock">
                                func (Page) GetBlock
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-getbool">
                                func (Page) GetBool
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-getobj">
                                func (Page) GetObj
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-getstr">
                                func (Page) GetStr
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-getstrlist">
                                func (Page) GetStrList
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-html">
                                func (*Page) HTML
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-info">
                                func (*Page) Info
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-issymlink">
                                func (*Page) IsSymlink
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-keywords">
                                func (*Page) Keywords
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-modified">
                                func (*Page) Modified
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-name">
                                func (*Page) Name
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-namene">
                                func (*Page) NameNE
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-osname">
                                func (*Page) OSName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-osnamene">
                                func (*Page) OSNameNE
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-parse">
                                func (*Page) Parse
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-path">
                                func (*Page) Path
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-prefix">
                                func (*Page) Prefix
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-preview">
                                func (*Page) Preview
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-redirect">
                                func (*Page) Redirect
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-relname">
                                func (*Page) RelName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-relnamene">
                                func (*Page) RelNameNE
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-relpath">
                                func (*Page) RelPath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-searchpath">
                                func (*Page) SearchPath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-set">
                                func (Page) Set
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-text">
                                func (*Page) Text
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-title">
                                func (*Page) Title
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-titleorname">
                                func (*Page) TitleOrName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-unset">
                                func (Page) Unset
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-page-write">
                                func (*Page) Write
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageinfo">
                                type PageInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageopt">
                                type PageOpt
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptcategory">
                                type PageOptCategory
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptcode">
                                type PageOptCode
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptdir">
                                type PageOptDir
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptexternal">
                                type PageOptExternal
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptexternaltype">
                                type PageOptExternalType
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageopthost">
                                type PageOptHost
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptimage">
                                type PageOptImage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptlink">
                                type PageOptLink
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptlinkfunction">
                                type PageOptLinkFunction
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptlinkopts">
                                type PageOptLinkOpts
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptnavigation">
                                type PageOptNavigation
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptpage">
                                type PageOptPage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptroot">
                                type PageOptRoot
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-pageoptsearch">
                                type PageOptSearch
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-parsererror">
                                type ParserError
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-parsererror-error">
                                func (*ParserError) Error
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-parsererror-unwrap">
                                func (*ParserError) Unwrap
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-position">
                                type Position
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-position-marshaljson">
                                func (*Position) MarshalJSON
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-position-string">
                                func (Position) String
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-position-unmarshaljson">
                                func (*Position) UnmarshalJSON
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-warning">
                                type Warning
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-warning-log">
                                func (Warning) Log
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
    <div class="q-sec">
        <h1 class="q-sec-title" id="qa-wikifier">
            wikifier
        </h1>
        <p class="q-p">
            --
        </p>
<pre class="q-code chroma"><span class="line"><span class="cl">import &#34;.&#34;
</span></span></pre>
        <div class="q-sec">
            <h2 class="q-sec-title" id="qa-usage">
                Usage
            </h2>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// PageOptExternalTypeQuiki is the external type for quiki sites.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PageOptExternalTypeQuiki</span> <span class="nx">PageOptExternalType</span> <span class="p">=</span> <span class="s">&#34;quiki&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// PageOptExternalTypeMediaWiki is the external type for MediaWiki sites.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PageOptExternalTypeMediaWiki</span> <span class="p">=</span> <span class="s">&#34;mediawiki&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// PageOptExternalTypeNone is an external type that can be used for websites that</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// perform no normalization of page targets beyond normal URI escaping.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PageOptExternalTypeNone</span> <span class="p">=</span> <span class="s">&#34;none&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></pre>
            <div class="q-sec">
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--categoryname">
                        func  CategoryName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">CategoryName</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        CategoryName returns a clean category name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--categorynamene">
                        func  CategoryNameNE
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">CategoryNameNE</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        CategoryNameNE returns a clean category with No Extension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--injectpageopt">
                        func  InjectPageOpt
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">InjectPageOpt</span><span class="p">(</span><span class="nx">page</span> <span class="o">*</span><span class="nx">Page</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">*</span><span class="nx">PageOpt</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        InjectPageOpt extracts page options found in the specified page and injects them
                        into the provided PageOpt pointer.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--makedir">
                        func  MakeDir
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">MakeDir</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        MakeDir creates directories recursively.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--modelname">
                        func  ModelName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ModelName</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        ModelName returns a clean model name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--pagename">
                        func  PageName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">PageName</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        PageName returns a clean page name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--pagenameext">
                        func  PageNameExt
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">PageNameExt</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">ext</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        PageNameExt returns a clean page name with the provided extension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--pagenamelink">
                        func  PageNameLink
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">PageNameLink</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        PageNameLink returns a clean page name without the extension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--pagenamene">
                        func  PageNameNE
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">PageNameNE</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        PageNameNE returns a clean page name with No Extension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--scalestring">
                        func  ScaleString
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ScaleString</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">retina</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        ScaleString returns a string of scaled image names for use in srcset.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--uniquefilesindir">
                        func  UniqueFilesInDir
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">UniqueFilesInDir</span><span class="p">(</span><span class="nx">dir</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">extensions</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">thisDirOnly</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        UniqueFilesInDir recursively scans a directory for files matching the requested
                        extensions, resolves symlinks, and returns a list of unique files. That is, if
                        more than one link resolves to the same thing (as is the case for quiki page
                        redirects), there is only one occurrence in the output.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-attributedobject">
                        type AttributedObject
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">AttributedObject</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// getters</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">any</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetBool</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetStr</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetBlock</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">block</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetObj</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">AttributedObject</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// setters</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">any</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Unset</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// contains filtered or unexported methods</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        An AttributedObject is any object on which you can set and retrieve attributes.
                    </p>
                    <p class="q-p">
                        For example, a Page is an attributed object since it contains variables.
                        Likewise, a Map is an attributed object because it has named properties.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-fmtopt">
                        type FmtOpt
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">FmtOpt</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Pos</span>        <span class="nx">Position</span> <span class="c1">// position used for warnings (set internally)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">NoEntities</span> <span class="kt">bool</span>     <span class="c1">// disables html entity conversion</span>
</span></span><span class="line"><span class="cl">	<span class="nx">NoWarnings</span> <span class="kt">bool</span>     <span class="c1">// silence warnings for undefined variables</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        FmtOpt describes options for page.FmtOpts.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-html">
                        type HTML
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">HTML</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        HTML encapsulates a string to indicate that it is preformatted HTML. It lets
                        quiki&#39;s parsers know not to attempt to format it any further.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-list">
                        type List
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">List</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        List represents a list of items. It is a quiki data type as well as the base of
                        many block types.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newlist">
                        func  NewList
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewList</span><span class="p">(</span><span class="nx">mb</span> <span class="nx">block</span><span class="p">)</span> <span class="o">*</span><span class="nx">List</span>
</span></span></pre>
                    <p class="q-p">
                        NewList creates a new list, given the main block of the page it is to be
                        associated with.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-get">
                        func (List) Get
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">any</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        Get fetches a a value regardless of type.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to read a property of an object that does not support properties,
                        such as a string, Get returns an error.
                    </p>
                    <p class="q-p">
                        If the key is valid but nothing exists at it, Get returns (nil, nil).
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-getblock">
                        func (List) GetBlock
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">GetBlock</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">block</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetBlock is like Get except it always returns a block.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-getbool">
                        func (List) GetBool
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">GetBool</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetBool is like Get except it always returns a boolean.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-getobj">
                        func (List) GetObj
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">GetObj</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">AttributedObject</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetObj is like Get except it always returns an AttributedObject.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-getstr">
                        func (List) GetStr
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">GetStr</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetStr is like Get except it always returns a string.
                    </p>
                    <p class="q-p">
                        If the value is HTML, it is converted to a string.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-getstrlist">
                        func (List) GetStrList
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">GetStrList</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetStrList is like Get except it always returns a list of strings.
                    </p>
                    <p class="q-p">
                        If the value is a <code>list{}</code> block, the list&#39;s values are returned, with
                        non-strings quietly filtered out.
                    </p>
                    <p class="q-p">
                        If the value is a string, it is treated as a comma-separated list, and each item
                        is trimmed of prepending or suffixing whitespace.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-set">
                        func (List) Set
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">any</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Set sets a value at the given key.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to write to a property of an object that does not support
                        properties, such as a string, Set returns an error.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-string">
                        func (List) String
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-list-unset">
                        func (List) Unset
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">List</span><span class="p">)</span> <span class="nf">Unset</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Unset removes a value at the given key.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to unset a property of an object that does not support properties,
                        such as a string, Unset returns an error.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-map">
                        type Map
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Map</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        Map represents a Key-value dictionary. It is a quiki data type as well as the
                        base of many block types.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newmap">
                        func  NewMap
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewMap</span><span class="p">(</span><span class="nx">mb</span> <span class="nx">block</span><span class="p">)</span> <span class="o">*</span><span class="nx">Map</span>
</span></span></pre>
                    <p class="q-p">
                        NewMap creates a new map, given the main block of the page it is to be
                        associated with.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-get">
                        func (Map) Get
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">any</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        Get fetches a a value regardless of type.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to read a property of an object that does not support properties,
                        such as a string, Get returns an error.
                    </p>
                    <p class="q-p">
                        If the key is valid but nothing exists at it, Get returns (nil, nil).
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-getblock">
                        func (Map) GetBlock
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">GetBlock</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">block</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetBlock is like Get except it always returns a block.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-getbool">
                        func (Map) GetBool
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">GetBool</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetBool is like Get except it always returns a boolean.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-getobj">
                        func (Map) GetObj
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">GetObj</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">AttributedObject</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetObj is like Get except it always returns an AttributedObject.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-getstr">
                        func (Map) GetStr
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">GetStr</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetStr is like Get except it always returns a string.
                    </p>
                    <p class="q-p">
                        If the value is HTML, it is converted to a string.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-getstrlist">
                        func (Map) GetStrList
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">GetStrList</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetStrList is like Get except it always returns a list of strings.
                    </p>
                    <p class="q-p">
                        If the value is a <code>list{}</code> block, the list&#39;s values are returned, with
                        non-strings quietly filtered out.
                    </p>
                    <p class="q-p">
                        If the value is a string, it is treated as a comma-separated list, and each item
                        is trimmed of prepending or suffixing whitespace.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-keys">
                        func (*Map) Keys
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">Keys</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Keys returns a string of actual underlying map keys.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-map">
                        func (*Map) Map
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">Map</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">any</span>
</span></span></pre>
                    <p class="q-p">
                        Map returns the actual underlying Go map.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-orderedkeys">
                        func (*Map) OrderedKeys
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">OrderedKeys</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        OrderedKeys returns a string of map keys in the order provided in the source.
                        Keys that were set internally (and not from quiki source code) are omitted.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-set">
                        func (Map) Set
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">any</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Set sets a value at the given key.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to write to a property of an object that does not support
                        properties, such as a string, Set returns an error.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-string">
                        func (Map) String
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-map-unset">
                        func (Map) Unset
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Map</span><span class="p">)</span> <span class="nf">Unset</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Unset removes a value at the given key.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to unset a property of an object that does not support properties,
                        such as a string, Unset returns an error.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-modelinfo">
                        type ModelInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ModelInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Title</span>       <span class="kt">string</span>     <span class="s">`json:&#34;title&#34;`</span>            <span class="c1">// @model.title</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Author</span>      <span class="kt">string</span>     <span class="s">`json:&#34;author,omitempty&#34;`</span> <span class="c1">// @model.author</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Description</span> <span class="kt">string</span>     <span class="s">`json:&#34;desc,omitempty&#34;`</span>   <span class="c1">// @model.desc</span>
</span></span><span class="line"><span class="cl">	<span class="nx">File</span>        <span class="kt">string</span>     <span class="s">`json:&#34;file&#34;`</span>             <span class="c1">// filename</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FileNE</span>      <span class="kt">string</span>     <span class="s">`json:&#34;file_ne&#34;`</span>          <span class="c1">// filename with no extension</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Path</span>        <span class="kt">string</span>     <span class="s">`json:&#34;path&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Created</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;created,omitempty&#34;`</span>  <span class="c1">// creation time</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Modified</span>    <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span> <span class="c1">// modify time</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        ModelInfo represents metadata associated with a model.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-page">
                        type Page
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Page</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Source</span>   <span class="kt">string</span>   <span class="c1">// source content</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FilePath</span> <span class="kt">string</span>   <span class="c1">// Path to the .page file</span>
</span></span><span class="line"><span class="cl">	<span class="nx">VarsOnly</span> <span class="kt">bool</span>     <span class="c1">// True if Parse() should only extract variables</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Opt</span>      <span class="o">*</span><span class="nx">PageOpt</span> <span class="c1">// page options</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">Images</span>    <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][][]</span><span class="kt">int</span>   <span class="c1">// references to images</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Models</span>    <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">ModelInfo</span> <span class="c1">// references to models</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PageLinks</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">int</span>     <span class="c1">// references to other pages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">Wiki</span>     <span class="kt">any</span>  <span class="c1">// only available during Parse() and HTML()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Markdown</span> <span class="kt">bool</span> <span class="c1">// true if this is a markdown source</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">Warnings</span> <span class="p">[]</span><span class="nx">Warning</span> <span class="c1">// parser warnings</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Error</span>    <span class="o">*</span><span class="nx">Warning</span>  <span class="c1">// parser error, as an encodable Warning</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        Page represents a single page or article, generally associated with a .page
                        file. It provides the most basic public interface to parsing with the wikifier
                        engine.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newpage">
                        func  NewPage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewPage</span><span class="p">(</span><span class="nx">filePath</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Page</span>
</span></span></pre>
                    <p class="q-p">
                        NewPage creates a page given its filepath.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newpagepath">
                        func  NewPagePath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewPagePath</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Page</span>
</span></span></pre>
                    <p class="q-p">
                        NewPagePath creates a page given its filepath and relative name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newpagesource">
                        func  NewPageSource
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewPageSource</span><span class="p">(</span><span class="nx">source</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Page</span>
</span></span></pre>
                    <p class="q-p">
                        NewPageSource creates a page given some source code.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-author">
                        func (*Page) Author
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Author</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Author returns the page author&#39;s name, if any.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-css">
                        func (*Page) CSS
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">CSS</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        CSS generates and returns the CSS code for the page&#39;s inline styles.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-cacheexists">
                        func (*Page) CacheExists
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">CacheExists</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        CacheExists is true if the page cache file exists.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-cachemodified">
                        func (*Page) CacheModified
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">CacheModified</span><span class="p">()</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span></pre>
                    <p class="q-p">
                        CacheModified returns the page cache file time.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-cachepath">
                        func (*Page) CachePath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">CachePath</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        CachePath returns the absolute path to the page cache file.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-categories">
                        func (*Page) Categories
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Categories</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Categories returns a list of categories the page belongs to.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-created">
                        func (*Page) Created
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Created</span><span class="p">()</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span></pre>
                    <p class="q-p">
                        Created returns the page creation time.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-description">
                        func (*Page) Description
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Description</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Description returns the page description.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-draft">
                        func (*Page) Draft
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Draft</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        Draft returns true if the page is marked as a draft.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-exists">
                        func (*Page) Exists
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Exists</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        Exists is true if the page exists.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-external">
                        func (*Page) External
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">External</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        External returns true if the page is outside the page directory as defined by
                        the configuration, with symlinks considered.
                    </p>
                    <p class="q-p">
                        If <code>dir.wiki</code> isn&#39;t set, External is always true (since the page is not
                        associated with a wiki at all).
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-fmttitle">
                        func (*Page) FmtTitle
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">FmtTitle</span><span class="p">()</span> <span class="nx">HTML</span>
</span></span></pre>
                    <p class="q-p">
                        FmtTitle returns the page title, preserving any possible text formatting.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-generated">
                        func (*Page) Generated
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Generated</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        Generated returns true if the page was auto-generated from some other source
                        content.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-get">
                        func (Page) Get
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">any</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        Get fetches a a value regardless of type.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to read a property of an object that does not support properties,
                        such as a string, Get returns an error.
                    </p>
                    <p class="q-p">
                        If the key is valid but nothing exists at it, Get returns (nil, nil).
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-getblock">
                        func (Page) GetBlock
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">GetBlock</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">block</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetBlock is like Get except it always returns a block.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-getbool">
                        func (Page) GetBool
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">GetBool</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetBool is like Get except it always returns a boolean.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-getobj">
                        func (Page) GetObj
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">GetObj</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">AttributedObject</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetObj is like Get except it always returns an AttributedObject.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-getstr">
                        func (Page) GetStr
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">GetStr</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetStr is like Get except it always returns a string.
                    </p>
                    <p class="q-p">
                        If the value is HTML, it is converted to a string.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-getstrlist">
                        func (Page) GetStrList
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">GetStrList</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GetStrList is like Get except it always returns a list of strings.
                    </p>
                    <p class="q-p">
                        If the value is a <code>list{}</code> block, the list&#39;s values are returned, with
                        non-strings quietly filtered out.
                    </p>
                    <p class="q-p">
                        If the value is a string, it is treated as a comma-separated list, and each item
                        is trimmed of prepending or suffixing whitespace.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-html">
                        func (*Page) HTML
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">HTML</span><span class="p">()</span> <span class="nx">HTML</span>
</span></span></pre>
                    <p class="q-p">
                        HTML generates and returns the HTML code for the page. The page must be parsed
                        with Parse before attempting this method.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-info">
                        func (*Page) Info
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Info</span><span class="p">()</span> <span class="nx">PageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        Info returns the PageInfo for the page.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-issymlink">
                        func (*Page) IsSymlink
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">IsSymlink</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        IsSymlink returns true if the page is a symbolic link to another file within the
                        page directory. If it is symlinked to somewhere outside the page directory, it
                        is treated as a normal page rather than a redirect.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-keywords">
                        func (*Page) Keywords
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Keywords</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Keywords returns the list of page keywords.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-modified">
                        func (*Page) Modified
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Modified</span><span class="p">()</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span></pre>
                    <p class="q-p">
                        Modified returns the page modification time.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-name">
                        func (*Page) Name
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Name returns the resolved page name with extension.
                    </p>
                    <p class="q-p">
                        This DOES take symbolic links into account. and DOES include the page prefix if
                        applicable. Any prefix will have forward slashes regardless of OS.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-namene">
                        func (*Page) NameNE
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">NameNE</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        NameNE returns the resolved page name with No Extension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-osname">
                        func (*Page) OSName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">OSName</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        OSName is like Name, except it uses the native path separator. It should be used
                        for file operations only.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-osnamene">
                        func (*Page) OSNameNE
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">OSNameNE</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        OSNameNE is like NameNE, except it uses the native path separator. It should be
                        used for file operations only.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-parse">
                        func (*Page) Parse
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Parse</span><span class="p">()</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Parse opens the page file and attempts to parse it, returning any errors
                        encountered.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-path">
                        func (*Page) Path
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Path</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Path returns the absolute path to the page as resolved. If the path does not
                        resolve, returns an empty string.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-prefix">
                        func (*Page) Prefix
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Prefix</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Prefix returns the page prefix.
                    </p>
                    <p class="q-p">
                        For example, for a page named a/b.page, this is a. For a page named a.page, this
                        is an empty string.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-preview">
                        func (*Page) Preview
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Preview</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Preview returns a preview of the text on the page, up to 25 words or 150
                        characters. If the page has a Description, that is used instead of generating a
                        preview.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-redirect">
                        func (*Page) Redirect
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Redirect</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Redirect returns the location to which the page redirects, if any. This may be a
                        relative or absolute URL, suitable for use in a Location header.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-relname">
                        func (*Page) RelName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">RelName</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        RelName returns the unresolved page filename, with or without extension. This
                        does NOT take symbolic links into account. It is not guaranteed to exist.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-relnamene">
                        func (*Page) RelNameNE
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">RelNameNE</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        RelNameNE returns the unresolved page name with No Extension, relative to the
                        page directory option. This does NOT take symbolic links into account. It is not
                        guaranteed to exist.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-relpath">
                        func (*Page) RelPath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">RelPath</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        RelPath returns the unresolved file path to the page. It may be a relative or
                        absolute path. It is not guaranteed to exist.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-searchpath">
                        func (*Page) SearchPath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">SearchPath</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        SearchPath returns the absolute path to the page search text file.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-set">
                        func (Page) Set
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">Set</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">any</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Set sets a value at the given key.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to write to a property of an object that does not support
                        properties, such as a string, Set returns an error.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-text">
                        func (*Page) Text
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Text</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Text generates and returns the rendered plain text for the page. The page must
                        be parsed with Parse before attempting this method.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-title">
                        func (*Page) Title
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Title</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Title returns the page title with HTML text formatting tags stripped.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-titleorname">
                        func (*Page) TitleOrName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">TitleOrName</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        TitleOrName returns the result of Title if available, otherwise that of Name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-unset">
                        func (Page) Unset
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">scope</span> <span class="nx">Page</span><span class="p">)</span> <span class="nf">Unset</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        Unset removes a value at the given key.
                    </p>
                    <p class="q-p">
                        The key may be segmented to indicate properties of each object (e.g.
                        person.name).
                    </p>
                    <p class="q-p">
                        If attempting to unset a property of an object that does not support properties,
                        such as a string, Unset returns an error.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-page-write">
                        func (*Page) Write
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="nf">Write</span><span class="p">()</span> <span class="kt">error</span>
</span></span></pre>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageinfo">
                        type PageInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Path</span>        <span class="kt">string</span>     <span class="s">`json:&#34;-&#34;`</span>                   <span class="c1">// absolute filepath</span>
</span></span><span class="line"><span class="cl">	<span class="nx">File</span>        <span class="kt">string</span>     <span class="s">`json:&#34;file,omitempty&#34;`</span>      <span class="c1">// name with extension, always with forward slashes</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FileNE</span>      <span class="kt">string</span>     <span class="s">`json:&#34;file_ne,omitempty&#34;`</span>   <span class="c1">// name without extension, always with forward slashes</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Created</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;created,omitempty&#34;`</span>   <span class="c1">// creation time</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Modified</span>    <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span>  <span class="c1">// modify time</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Draft</span>       <span class="kt">bool</span>       <span class="s">`json:&#34;draft,omitempty&#34;`</span>     <span class="c1">// true if page is marked as draft</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Generated</span>   <span class="kt">bool</span>       <span class="s">`json:&#34;generated,omitempty&#34;`</span> <span class="c1">// true if page was generated from another source</span>
</span></span><span class="line"><span class="cl">	<span class="nx">External</span>    <span class="kt">bool</span>       <span class="s">`json:&#34;external,omitempty&#34;`</span>  <span class="c1">// true if page is outside the page directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Redirect</span>    <span class="kt">string</span>     <span class="s">`json:&#34;redirect,omitempty&#34;`</span>  <span class="c1">// path page is to redirect to</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FmtTitle</span>    <span class="nx">HTML</span>       <span class="s">`json:&#34;fmt_title,omitempty&#34;`</span> <span class="c1">// title with formatting tags</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Title</span>       <span class="kt">string</span>     <span class="s">`json:&#34;title,omitempty&#34;`</span>     <span class="c1">// title without tags</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Author</span>      <span class="kt">string</span>     <span class="s">`json:&#34;author,omitempty&#34;`</span>    <span class="c1">// author&#39;s name</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Description</span> <span class="kt">string</span>     <span class="s">`json:&#34;desc,omitempty&#34;`</span>      <span class="c1">// description</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Keywords</span>    <span class="p">[]</span><span class="kt">string</span>   <span class="s">`json:&#34;keywords,omitempty&#34;`</span>  <span class="c1">// keywords</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Preview</span>     <span class="kt">string</span>     <span class="s">`json:&#34;preview,omitempty&#34;`</span>   <span class="c1">// first 25 words or 150 chars. empty w/ description</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Warnings</span>    <span class="p">[]</span><span class="nx">Warning</span>  <span class="s">`json:&#34;warnings,omitempty&#34;`</span>  <span class="c1">// parser warnings</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Error</span>       <span class="o">*</span><span class="nx">Warning</span>   <span class="s">`json:&#34;error,omitempty&#34;`</span>     <span class="c1">// parser error, as an encodable warning</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageInfo represents metadata associated with a page.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageopt">
                        type PageOpt
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOpt</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>         <span class="kt">string</span> <span class="c1">// wiki name</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Logo</span>         <span class="kt">string</span> <span class="c1">// logo filename, relative to image dir</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MainPage</span>     <span class="kt">string</span> <span class="c1">// name of main page</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ErrorPage</span>    <span class="kt">string</span> <span class="c1">// name of error page</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Template</span>     <span class="kt">string</span> <span class="c1">// name of template</span>
</span></span><span class="line"><span class="cl">	<span class="nx">MainRedirect</span> <span class="kt">bool</span>   <span class="c1">// redirect on main page rather than serve root</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Page</span>         <span class="nx">PageOptPage</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Host</span>         <span class="nx">PageOptHost</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Dir</span>          <span class="nx">PageOptDir</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Root</span>         <span class="nx">PageOptRoot</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Image</span>        <span class="nx">PageOptImage</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Category</span>     <span class="nx">PageOptCategory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Search</span>       <span class="nx">PageOptSearch</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Link</span>         <span class="nx">PageOptLink</span>
</span></span><span class="line"><span class="cl">	<span class="nx">External</span>     <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">PageOptExternal</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Navigation</span>   <span class="p">[]</span><span class="nx">PageOptNavigation</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOpt describes wiki/website options to a Page.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptcategory">
                        type PageOptCategory
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptCategory</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PerPage</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptCategory describes wiki category options.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptcode">
                        type PageOptCode
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptCode</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Lang</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Style</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptCode describes options for <code>code{}</code> blocks.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptdir">
                        type PageOptDir
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptDir</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Wiki</span>     <span class="kt">string</span> <span class="c1">// path to wiki root directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Image</span>    <span class="kt">string</span> <span class="c1">// Deprecated: path to image directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Category</span> <span class="kt">string</span> <span class="c1">// Deprecated: path to category directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Page</span>     <span class="kt">string</span> <span class="c1">// Deprecated: path to page directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Model</span>    <span class="kt">string</span> <span class="c1">// Deprecated: path to model directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Markdown</span> <span class="kt">string</span> <span class="c1">// Deprecated: path to markdown directory</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Cache</span>    <span class="kt">string</span> <span class="c1">// Deprecated: path to cache directory</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptDir describes actual filepaths to wiki resources.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptexternal">
                        type PageOptExternal
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptExternal</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>              <span class="c1">// long name (e.g. Wikipedia)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Root</span> <span class="kt">string</span>              <span class="c1">// wiki page root (no trailing slash)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Type</span> <span class="nx">PageOptExternalType</span> <span class="c1">// wiki type</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptExternal describes an external wiki that we can use for link targets.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptexternaltype">
                        type PageOptExternalType
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptExternalType</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptExternalType describes
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageopthost">
                        type PageOptHost
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptHost</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Wiki</span> <span class="kt">string</span> <span class="c1">// HTTP host for the wiki</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptHost describes HTTP hosts for a wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptimage">
                        type PageOptImage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptImage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Retina</span>     <span class="p">[]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">SizeMethod</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Calc</span>       <span class="kd">func</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">page</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">h</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">fullSize</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sizer</span>      <span class="kd">func</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">width</span><span class="p">,</span> <span class="nx">height</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">page</span> <span class="o">*</span><span class="nx">Page</span><span class="p">)</span> <span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptImage describes wiki imaging options.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptlink">
                        type PageOptLink
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptLink</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ParseInternal</span> <span class="nx">PageOptLinkFunction</span> <span class="c1">// internal page links</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ParseExternal</span> <span class="nx">PageOptLinkFunction</span> <span class="c1">// external wiki page links</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ParseCategory</span> <span class="nx">PageOptLinkFunction</span> <span class="c1">// category links</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptLink describes functions to assist with link targets.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptlinkfunction">
                        type PageOptLinkFunction
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptLinkFunction</span> <span class="kd">func</span><span class="p">(</span><span class="nx">page</span> <span class="o">*</span><span class="nx">Page</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">*</span><span class="nx">PageOptLinkOpts</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        A PageOptLinkFunction sanitizes a link target.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptlinkopts">
                        type PageOptLinkOpts
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptLinkOpts</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Ok</span>             <span class="o">*</span><span class="kt">bool</span>   <span class="c1">// func sets to true if the link is valid</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Target</span>         <span class="o">*</span><span class="kt">string</span> <span class="c1">// func sets to overwrite the link target</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Tooltip</span>        <span class="o">*</span><span class="kt">string</span> <span class="c1">// func sets tooltip to display</span>
</span></span><span class="line"><span class="cl">	<span class="nx">DisplayDefault</span> <span class="o">*</span><span class="kt">string</span> <span class="c1">// func sets default text to display (if no pipe)</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">FmtOpt</span>                <span class="c1">// formatter options available to func</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptLinkOpts contains options passed to a PageOptLinkFunction.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptnavigation">
                        type PageOptNavigation
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptNavigation</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Link</span>    <span class="kt">string</span> <span class="c1">// link</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Display</span> <span class="kt">string</span> <span class="c1">// text to display</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptNavigation represents an ordered navigation item.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptpage">
                        type PageOptPage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptPage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">EnableTitle</span> <span class="kt">bool</span>        <span class="c1">// enable page title headings</span>
</span></span><span class="line"><span class="cl">	<span class="nx">EnableCache</span> <span class="kt">bool</span>        <span class="c1">// enable page caching</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ForceGen</span>    <span class="kt">bool</span>        <span class="c1">// force generation of page even if unchanged</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Code</span>        <span class="nx">PageOptCode</span> <span class="c1">// `code{}` block options</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptPage describes option relating to a page.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptroot">
                        type PageOptRoot
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptRoot</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Wiki</span>     <span class="kt">string</span> <span class="c1">// wiki root path</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Image</span>    <span class="kt">string</span> <span class="c1">// image root path</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Category</span> <span class="kt">string</span> <span class="c1">// category root path</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Page</span>     <span class="kt">string</span> <span class="c1">// page root path</span>
</span></span><span class="line"><span class="cl">	<span class="nx">File</span>     <span class="kt">string</span> <span class="c1">// file index path</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptRoot describes HTTP paths to wiki resources.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-pageoptsearch">
                        type PageOptSearch
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PageOptSearch</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Enable</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        PageOptSearch describes wiki search options.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-parsererror">
                        type ParserError
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ParserError</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Pos</span> <span class="nx">Position</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        ParserError represents an error in parsing with positional info.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-parsererror-error">
                        func (*ParserError) Error
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">ParserError</span><span class="p">)</span> <span class="nf">Error</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-parsererror-unwrap">
                        func (*ParserError) Unwrap
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">ParserError</span><span class="p">)</span> <span class="nf">Unwrap</span><span class="p">()</span> <span class="kt">error</span>
</span></span></pre>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-position">
                        type Position
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Position</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Line</span><span class="p">,</span> <span class="nx">Column</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        Position represents a line and column position within a quiki source file.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-position-marshaljson">
                        func (*Position) MarshalJSON
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pos</span> <span class="o">*</span><span class="nx">Position</span><span class="p">)</span> <span class="nf">MarshalJSON</span><span class="p">()</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        MarshalJSON encodes the position to <code>[line, column]</code>.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-position-string">
                        func (Position) String
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pos</span> <span class="nx">Position</span><span class="p">)</span> <span class="nf">String</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        String returns the position as <code>{line column}</code>.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-position-unmarshaljson">
                        func (*Position) UnmarshalJSON
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pos</span> <span class="o">*</span><span class="nx">Position</span><span class="p">)</span> <span class="nf">UnmarshalJSON</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        UnmarshalJSON decodes the position from <code>[line, column]</code>.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-warning">
                        type Warning
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Warning</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Message</span> <span class="kt">string</span>   <span class="s">`json:&#34;message&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Pos</span>     <span class="nx">Position</span> <span class="s">`json:&#34;position&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        Warning represents a warning on a page.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-warning-log">
                        func (Warning) Log
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="nx">Warning</span><span class="p">)</span> <span class="nf">Log</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span>
</span></span></pre>
                </div>
            </div>
        </div>
    </div>
</div>
