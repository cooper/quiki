{"css":"/* Background */ .bg { color: #272822; background-color: #fafafa }\n/* PreWrapper */ .chroma { color: #272822; background-color: #fafafa; }\n/* Error */ .chroma .err { color: #960050; background-color: #1e0010 }\n/* LineTableTD */ .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; }\n/* LineTable */ .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; }\n/* LineHighlight */ .chroma .hl { background-color: #e1e1e1 }\n/* LineNumbersTable */ .chroma .lnt { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* LineNumbers */ .chroma .ln { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* Line */ .chroma .line { display: flex; }\n/* Keyword */ .chroma .k { color: #00a8c8 }\n/* KeywordConstant */ .chroma .kc { color: #00a8c8 }\n/* KeywordDeclaration */ .chroma .kd { color: #00a8c8 }\n/* KeywordNamespace */ .chroma .kn { color: #f92672 }\n/* KeywordPseudo */ .chroma .kp { color: #00a8c8 }\n/* KeywordReserved */ .chroma .kr { color: #00a8c8 }\n/* KeywordType */ .chroma .kt { color: #00a8c8 }\n/* Name */ .chroma .n { color: #111111 }\n/* NameAttribute */ .chroma .na { color: #75af00 }\n/* NameBuiltin */ .chroma .nb { color: #111111 }\n/* NameBuiltinPseudo */ .chroma .bp { color: #111111 }\n/* NameClass */ .chroma .nc { color: #75af00 }\n/* NameConstant */ .chroma .no { color: #00a8c8 }\n/* NameDecorator */ .chroma .nd { color: #75af00 }\n/* NameEntity */ .chroma .ni { color: #111111 }\n/* NameException */ .chroma .ne { color: #75af00 }\n/* NameFunction */ .chroma .nf { color: #75af00 }\n/* NameFunctionMagic */ .chroma .fm { color: #111111 }\n/* NameLabel */ .chroma .nl { color: #111111 }\n/* NameNamespace */ .chroma .nn { color: #111111 }\n/* NameOther */ .chroma .nx { color: #75af00 }\n/* NameProperty */ .chroma .py { color: #111111 }\n/* NameTag */ .chroma .nt { color: #f92672 }\n/* NameVariable */ .chroma .nv { color: #111111 }\n/* NameVariableClass */ .chroma .vc { color: #111111 }\n/* NameVariableGlobal */ .chroma .vg { color: #111111 }\n/* NameVariableInstance */ .chroma .vi { color: #111111 }\n/* NameVariableMagic */ .chroma .vm { color: #111111 }\n/* Literal */ .chroma .l { color: #ae81ff }\n/* LiteralDate */ .chroma .ld { color: #d88200 }\n/* LiteralString */ .chroma .s { color: #d88200 }\n/* LiteralStringAffix */ .chroma .sa { color: #d88200 }\n/* LiteralStringBacktick */ .chroma .sb { color: #d88200 }\n/* LiteralStringChar */ .chroma .sc { color: #d88200 }\n/* LiteralStringDelimiter */ .chroma .dl { color: #d88200 }\n/* LiteralStringDoc */ .chroma .sd { color: #d88200 }\n/* LiteralStringDouble */ .chroma .s2 { color: #d88200 }\n/* LiteralStringEscape */ .chroma .se { color: #8045ff }\n/* LiteralStringHeredoc */ .chroma .sh { color: #d88200 }\n/* LiteralStringInterpol */ .chroma .si { color: #d88200 }\n/* LiteralStringOther */ .chroma .sx { color: #d88200 }\n/* LiteralStringRegex */ .chroma .sr { color: #d88200 }\n/* LiteralStringSingle */ .chroma .s1 { color: #d88200 }\n/* LiteralStringSymbol */ .chroma .ss { color: #d88200 }\n/* LiteralNumber */ .chroma .m { color: #ae81ff }\n/* LiteralNumberBin */ .chroma .mb { color: #ae81ff }\n/* LiteralNumberFloat */ .chroma .mf { color: #ae81ff }\n/* LiteralNumberHex */ .chroma .mh { color: #ae81ff }\n/* LiteralNumberInteger */ .chroma .mi { color: #ae81ff }\n/* LiteralNumberIntegerLong */ .chroma .il { color: #ae81ff }\n/* LiteralNumberOct */ .chroma .mo { color: #ae81ff }\n/* Operator */ .chroma .o { color: #f92672 }\n/* OperatorWord */ .chroma .ow { color: #f92672 }\n/* Punctuation */ .chroma .p { color: #111111 }\n/* Comment */ .chroma .c { color: #75715e }\n/* CommentHashbang */ .chroma .ch { color: #75715e }\n/* CommentMultiline */ .chroma .cm { color: #75715e }\n/* CommentSingle */ .chroma .c1 { color: #75715e }\n/* CommentSpecial */ .chroma .cs { color: #75715e }\n/* CommentPreproc */ .chroma .cp { color: #75715e }\n/* CommentPreprocFile */ .chroma .cpf { color: #75715e }\n/* GenericEmph */ .chroma .ge { font-style: italic }\n/* GenericStrong */ .chroma .gs { font-weight: bold }\n\n","file":"doc/technical/authenticator.md","file_ne":"doc/technical/authenticator","created":"2020-03-29T17:39:51-04:00","modified":"2020-03-29T17:39:51-04:00","generated":true,"external":true,"fmt_title":"authenticator","title":"authenticator","author":"Markdown","preview":"Contents authenticator Usage type Authenticator func  Open func (*Authenticator) Login func (*Authenticator) NewUser type User func (*User) GobDecode","warnings":[{"message":"No such code{} style 'monokailight' (from config)","position":[13,142]},{"message":"No such code{} style 'monokailight' (from config)","position":[24,362]},{"message":"No such code{} style 'monokailight' (from config)","position":[37,573]},{"message":"No such code{} style 'monokailight' (from config)","position":[49,831]},{"message":"No such code{} style 'monokailight' (from config)","position":[60,1059]},{"message":"No such code{} style 'monokailight' (from config)","position":[76,1356]},{"message":"No such code{} style 'monokailight' (from config)","position":[92,1607]},{"message":"No such code{} style 'monokailight' (from config)","position":[103,1787]}]}
<div class="q-main-2 q-main">
    <ul class="q-toc">
        <li><strong>Contents</strong></li>
        <li>
            <a class="q-link-internal" href="#authenticator">
                authenticator
            </a>
            <ul>
                <li>
                    <a class="q-link-internal" href="#usage">
                        Usage
                    </a>
                    <ul>
                        <li>
                            <a class="q-link-internal" href="#type-authenticator">
                                type Authenticator
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--open">
                                func  Open
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-authenticator-login">
                                func (*Authenticator) Login
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-authenticator-newuser">
                                func (*Authenticator) NewUser
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-user">
                                type User
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-user-gobdecode">
                                func (*User) GobDecode
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-user-gobencode">
                                func (*User) GobEncode
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
    <div class="q-sec">
        <h1 class="q-sec-title" id="qa-authenticator">
            authenticator
        </h1>
        <p class="q-p">
            --
        </p>
<pre class="q-code chroma"><span class="line"><span class="cl">import &#34;github.com/cooper/quiki/authenticator&#34;
</span></span></pre>
        <p class="q-p">
            Package authenticator provides server and site authentication services.
        </p>
        <div class="q-sec">
            <h2 class="q-sec-title" id="qa-usage">
                Usage
            </h2>
            <div class="q-sec">
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-authenticator">
                        type Authenticator
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Authenticator</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Users</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">User</span> <span class="s">`json:&#34;users,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        Authenticator represents a quiki server or site authentication service.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--open">
                        func  Open
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Open</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Authenticator</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        Open reads a user data file and returns an Authenticator for it. If the path
                        does not exist, a new data file is created.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-authenticator-login">
                        func (*Authenticator) Login
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">auth</span> <span class="o">*</span><span class="nx">Authenticator</span><span class="p">)</span> <span class="nf">Login</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">User</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        Login attempts a user login, returning the user on success.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-authenticator-newuser">
                        func (*Authenticator) NewUser
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">auth</span> <span class="o">*</span><span class="nx">Authenticator</span><span class="p">)</span> <span class="nf">NewUser</span><span class="p">(</span><span class="nx">user</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">password</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        NewUser registers a new user with the given information.
                    </p>
                    <p class="q-p">
                        The Password field of the struct should be left empty and the plain-text
                        password passed to the function.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-user">
                        type User
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Username</span>    <span class="kt">string</span> <span class="s">`json:&#34;u&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">DisplayName</span> <span class="kt">string</span> <span class="s">`json:&#34;d&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Email</span>       <span class="kt">string</span> <span class="s">`json:&#34;e&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Password</span>    <span class="p">[]</span><span class="kt">byte</span> <span class="s">`json:&#34;p&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        User represents a user.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-user-gobdecode">
                        func (*User) GobDecode
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">GobDecode</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        GobDecode allows users to be decoded from a session.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-user-gobencode">
                        func (*User) GobEncode
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">GobEncode</span><span class="p">()</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        GobEncode allows users to be encoded for storage in a session.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
