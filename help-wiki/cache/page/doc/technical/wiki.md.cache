{"css":"/* Background */ .bg { color: #272822; background-color: #fafafa }\n/* PreWrapper */ .chroma { color: #272822; background-color: #fafafa; }\n/* Error */ .chroma .err { color: #960050; background-color: #1e0010 }\n/* LineTableTD */ .chroma .lntd { vertical-align: top; padding: 0; margin: 0; border: 0; }\n/* LineTable */ .chroma .lntable { border-spacing: 0; padding: 0; margin: 0; border: 0; }\n/* LineHighlight */ .chroma .hl { background-color: #e1e1e1 }\n/* LineNumbersTable */ .chroma .lnt { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* LineNumbers */ .chroma .ln { white-space: pre; user-select: none; margin-right: 0.4em; padding: 0 0.4em 0 0.4em;color: #7f7f7f }\n/* Line */ .chroma .line { display: flex; }\n/* Keyword */ .chroma .k { color: #00a8c8 }\n/* KeywordConstant */ .chroma .kc { color: #00a8c8 }\n/* KeywordDeclaration */ .chroma .kd { color: #00a8c8 }\n/* KeywordNamespace */ .chroma .kn { color: #f92672 }\n/* KeywordPseudo */ .chroma .kp { color: #00a8c8 }\n/* KeywordReserved */ .chroma .kr { color: #00a8c8 }\n/* KeywordType */ .chroma .kt { color: #00a8c8 }\n/* Name */ .chroma .n { color: #111111 }\n/* NameAttribute */ .chroma .na { color: #75af00 }\n/* NameBuiltin */ .chroma .nb { color: #111111 }\n/* NameBuiltinPseudo */ .chroma .bp { color: #111111 }\n/* NameClass */ .chroma .nc { color: #75af00 }\n/* NameConstant */ .chroma .no { color: #00a8c8 }\n/* NameDecorator */ .chroma .nd { color: #75af00 }\n/* NameEntity */ .chroma .ni { color: #111111 }\n/* NameException */ .chroma .ne { color: #75af00 }\n/* NameFunction */ .chroma .nf { color: #75af00 }\n/* NameFunctionMagic */ .chroma .fm { color: #111111 }\n/* NameLabel */ .chroma .nl { color: #111111 }\n/* NameNamespace */ .chroma .nn { color: #111111 }\n/* NameOther */ .chroma .nx { color: #75af00 }\n/* NameProperty */ .chroma .py { color: #111111 }\n/* NameTag */ .chroma .nt { color: #f92672 }\n/* NameVariable */ .chroma .nv { color: #111111 }\n/* NameVariableClass */ .chroma .vc { color: #111111 }\n/* NameVariableGlobal */ .chroma .vg { color: #111111 }\n/* NameVariableInstance */ .chroma .vi { color: #111111 }\n/* NameVariableMagic */ .chroma .vm { color: #111111 }\n/* Literal */ .chroma .l { color: #ae81ff }\n/* LiteralDate */ .chroma .ld { color: #d88200 }\n/* LiteralString */ .chroma .s { color: #d88200 }\n/* LiteralStringAffix */ .chroma .sa { color: #d88200 }\n/* LiteralStringBacktick */ .chroma .sb { color: #d88200 }\n/* LiteralStringChar */ .chroma .sc { color: #d88200 }\n/* LiteralStringDelimiter */ .chroma .dl { color: #d88200 }\n/* LiteralStringDoc */ .chroma .sd { color: #d88200 }\n/* LiteralStringDouble */ .chroma .s2 { color: #d88200 }\n/* LiteralStringEscape */ .chroma .se { color: #8045ff }\n/* LiteralStringHeredoc */ .chroma .sh { color: #d88200 }\n/* LiteralStringInterpol */ .chroma .si { color: #d88200 }\n/* LiteralStringOther */ .chroma .sx { color: #d88200 }\n/* LiteralStringRegex */ .chroma .sr { color: #d88200 }\n/* LiteralStringSingle */ .chroma .s1 { color: #d88200 }\n/* LiteralStringSymbol */ .chroma .ss { color: #d88200 }\n/* LiteralNumber */ .chroma .m { color: #ae81ff }\n/* LiteralNumberBin */ .chroma .mb { color: #ae81ff }\n/* LiteralNumberFloat */ .chroma .mf { color: #ae81ff }\n/* LiteralNumberHex */ .chroma .mh { color: #ae81ff }\n/* LiteralNumberInteger */ .chroma .mi { color: #ae81ff }\n/* LiteralNumberIntegerLong */ .chroma .il { color: #ae81ff }\n/* LiteralNumberOct */ .chroma .mo { color: #ae81ff }\n/* Operator */ .chroma .o { color: #f92672 }\n/* OperatorWord */ .chroma .ow { color: #f92672 }\n/* Punctuation */ .chroma .p { color: #111111 }\n/* Comment */ .chroma .c { color: #75715e }\n/* CommentHashbang */ .chroma .ch { color: #75715e }\n/* CommentMultiline */ .chroma .cm { color: #75715e }\n/* CommentSingle */ .chroma .c1 { color: #75715e }\n/* CommentSpecial */ .chroma .cs { color: #75715e }\n/* CommentPreproc */ .chroma .cp { color: #75715e }\n/* CommentPreprocFile */ .chroma .cpf { color: #75715e }\n/* GenericEmph */ .chroma .ge { font-style: italic }\n/* GenericStrong */ .chroma .gs { font-weight: bold }\n\n","file":"doc/technical/wiki.md","file_ne":"doc/technical/wiki","created":"2025-02-23T09:41:58.238758286-05:00","modified":"2025-02-23T09:41:58.238758286-05:00","generated":true,"external":true,"fmt_title":"wiki","title":"wiki","author":"Markdown","preview":"Contents wiki Usage func  SortAuthor func  SortCreated func  SortDimensions func  SortModified func  SortTitle func  ValidBranchName type Category","warnings":[{"message":"No such code{} style 'monokailight' (from config)","position":[13,7]},{"message":"No such code{} style 'monokailight' (from config)","position":[18,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[33,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[44,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[55,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[66,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[77,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[88,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[104,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[168,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[184,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[195,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[224,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[237,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[248,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[273,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[301,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[332,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[362,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[416,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[499,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[515,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[533,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[551,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[562,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[573,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[584,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[596,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[607,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[618,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[630,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[641,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[658,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[671,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[686,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[697,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[712,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[731,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[743,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[754,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[765,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[777,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[788,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[800,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[811,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[822,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[839,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[850,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[861,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[872,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[883,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[899,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[911,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[923,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[941,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[952,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[963,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[974,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[986,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[997,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1010,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1021,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1032,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1044,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1056,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1067,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1080,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1092,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1104,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1115,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1126,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1139,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1151,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1173,12]},{"message":"No such code{} style 'monokailight' (from config)","position":[1190,12]}]}
<div class="q-main-doc/technical/wiki q-main">
    <ul class="q-toc">
        <li><strong>Contents</strong></li>
        <li>
            <a class="q-link-internal" href="#wiki">
                wiki
            </a>
            <ul>
                <li>
                    <a class="q-link-internal" href="#usage">
                        Usage
                    </a>
                    <ul>
                        <li>
                            <a class="q-link-internal" href="#func--sortauthor">
                                func  SortAuthor
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--sortcreated">
                                func  SortCreated
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--sortdimensions">
                                func  SortDimensions
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--sortmodified">
                                func  SortModified
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--sorttitle">
                                func  SortTitle
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--validbranchname">
                                func  ValidBranchName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-category">
                                type Category
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-category-addpage">
                                func (*Category) AddPage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-category-exists">
                                func (*Category) Exists
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-categoryentry">
                                type CategoryEntry
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-categoryinfo">
                                type CategoryInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-categorytype">
                                type CategoryType
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-commitopts">
                                type CommitOpts
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-displaycategoryposts">
                                type DisplayCategoryPosts
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-displayerror">
                                type DisplayError
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-displayfile">
                                type DisplayFile
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-displayimage">
                                type DisplayImage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-displaypage">
                                type DisplayPage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-displayredirect">
                                type DisplayRedirect
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-imageinfo">
                                type ImageInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-sizedimage">
                                type SizedImage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--sizedimagefromname">
                                func  SizedImageFromName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-sizedimage-fullsizename">
                                func (SizedImage) FullSizeName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-sizedimage-scalename">
                                func (SizedImage) ScaleName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-sizedimage-trueheight">
                                func (SizedImage) TrueHeight
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-sizedimage-truename">
                                func (SizedImage) TrueName
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-sizedimage-truenamene">
                                func (SizedImage) TrueNameNE
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-sizedimage-truewidth">
                                func (SizedImage) TrueWidth
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-sortfunc">
                                type SortFunc
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-sortinfo">
                                type SortInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-sortable">
                                type Sortable
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#type-wiki">
                                type Wiki
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newwiki">
                                func  NewWiki
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func--newwikiconfig">
                                func  NewWikiConfig
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-absfilepath">
                                func (*Wiki) AbsFilePath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-branch">
                                func (*Wiki) Branch
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-branchnames">
                                func (*Wiki) BranchNames
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-categories">
                                func (*Wiki) Categories
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-categoriessorted">
                                func (*Wiki) CategoriesSorted
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-categoryinfo">
                                func (*Wiki) CategoryInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-categorymap">
                                func (*Wiki) CategoryMap
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-debug">
                                func (*Wiki) Debug
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-debugf">
                                func (*Wiki) Debugf
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-dir">
                                func (*Wiki) Dir
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displaycategoryposts">
                                func (*Wiki) DisplayCategoryPosts
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displayfile">
                                func (*Wiki) DisplayFile
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displayimage">
                                func (*Wiki) DisplayImage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displaypage">
                                func (*Wiki) DisplayPage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displaypagedraft">
                                func (*Wiki) DisplayPageDraft
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displaysizedimage">
                                func (*Wiki) DisplaySizedImage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-displaysizedimagegenerate">
                                func (*Wiki) DisplaySizedImageGenerate
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-findpage">
                                func (*Wiki) FindPage
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-getcategory">
                                func (*Wiki) GetCategory
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-getspecialcategory">
                                func (*Wiki) GetSpecialCategory
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-imageinfo">
                                func (*Wiki) ImageInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-imagemap">
                                func (*Wiki) ImageMap
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-images">
                                func (*Wiki) Images
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-imagessorted">
                                func (*Wiki) ImagesSorted
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-log">
                                func (*Wiki) Log
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-logf">
                                func (*Wiki) Logf
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-modelinfo">
                                func (*Wiki) ModelInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-modelmap">
                                func (*Wiki) ModelMap
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-models">
                                func (*Wiki) Models
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-modelssorted">
                                func (*Wiki) ModelsSorted
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-newbranch">
                                func (*Wiki) NewBranch
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-pageinfo">
                                func (*Wiki) PageInfo
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-pagemap">
                                func (*Wiki) PageMap
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-pages">
                                func (*Wiki) Pages
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-pagessorted">
                                func (*Wiki) PagesSorted
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-pregenerate">
                                func (*Wiki) Pregenerate
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-relpath">
                                func (*Wiki) RelPath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-unresolvedabsfilepath">
                                func (*Wiki) UnresolvedAbsFilePath
                            </a>
                        </li>
                        <li>
                            <a class="q-link-internal" href="#func-wiki-writefile">
                                func (*Wiki) WriteFile
                            </a>
                        </li>
                    </ul>
                </li>
            </ul>
        </li>
    </ul>
    <div class="q-sec">
        <h1 class="q-sec-title" id="qa-wiki">
            wiki
        </h1>
        <p class="q-p">
            --
        </p>
<pre class="q-code chroma"><span class="line"><span class="cl">import &#34;github.com/cooper/quiki/wiki&#34;
</span></span></pre>
        <div class="q-sec">
            <h2 class="q-sec-title" id="qa-usage">
                Usage
            </h2>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// CategoryTypeImage is a type of category that tracks which pages use an image.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CategoryTypeImage</span> <span class="nx">CategoryType</span> <span class="p">=</span> <span class="s">&#34;image&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// CategoryTypeModel is a metacategory that tracks which pages use a model.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CategoryTypeModel</span> <span class="p">=</span> <span class="s">&#34;model&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// CategoryTypePage is a metacategory that tracks which pages reference another page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CategoryTypePage</span> <span class="p">=</span> <span class="s">&#34;page&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></pre>
            <div class="q-sec">
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--sortauthor">
                        func  SortAuthor
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SortAuthor</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">Sortable</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        SortAuthor is a SortFunc for sorting items alphabetically by author.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--sortcreated">
                        func  SortCreated
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SortCreated</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">Sortable</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        SortCreated is a SortFunc for sorting items by creation time.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--sortdimensions">
                        func  SortDimensions
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SortDimensions</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">Sortable</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        SortDimensions is a SortFunc for sorting images by their dimensions.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--sortmodified">
                        func  SortModified
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SortModified</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">Sortable</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        SortModified is a SortFunc for sorting items by modification time.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--sorttitle">
                        func  SortTitle
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SortTitle</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">Sortable</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        SortTitle is a SortFunc for sorting items alphabetically by title.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--validbranchname">
                        func  ValidBranchName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ValidBranchName</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        ValidBranchName returns whether a branch name is valid.
                    </p>
                    <p class="q-p">
                        quiki branch names may contain word-like characters <code>\w</code> and forward slash (<code>/</code>)
                        but may not start or end with a slash.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-category">
                        type Category
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Category</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// category path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Path</span> <span class="kt">string</span> <span class="s">`json:&#34;-&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// category filename, including the .cat extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">File</span> <span class="kt">string</span> <span class="s">`json:&#34;file&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// category name without extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Name</span>   <span class="kt">string</span> <span class="s">`json:&#34;name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">FileNE</span> <span class="kt">string</span> <span class="s">`json:&#34;file_ne,omitempty&#34;`</span> <span class="c1">// alias for consistency
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// human-readable category title
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Title</span> <span class="kt">string</span> <span class="s">`json:&#34;title,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the category was created
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Created</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;created,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CreatedHTTP</span> <span class="kt">string</span>     <span class="s">`json:&#34;created_http,omitempty&#34;`</span> <span class="c1">// HTTP formatted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the category was last modified.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this is updated when pages are added and deleted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Modified</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ModifiedHTTP</span> <span class="kt">string</span>     <span class="s">`json:&#34;modified_http,omitempty&#34;`</span> <span class="c1">// HTTP formatted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the category metafile was last read.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Asof</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;asof,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// pages in the category. keys are filenames
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Pages</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">CategoryEntry</span> <span class="s">`json:&#34;pages,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// when true, the category is preserved even when no pages remain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Preserve</span> <span class="kt">bool</span> <span class="s">`json:&#34;preserve,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// if applicable, this is the type of special category.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// for normal categories, this is empty
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Type</span> <span class="nx">CategoryType</span> <span class="s">`json:&#34;type,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// for CategoryTypePage, this is the info for the tracked page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PageInfo</span> <span class="o">*</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageInfo</span> <span class="s">`json:&#34;page_info,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// for CategoryTypeModel, this is the info for the tracked model
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModelInfo</span> <span class="o">*</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">ModelInfo</span> <span class="s">`json:&#34;model_info,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// for CategoryTypeImage, this is the info for the tracked image
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ImageInfo</span> <span class="o">*</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Width</span>  <span class="kt">int</span> <span class="s">`json:&#34;width,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Height</span> <span class="kt">int</span> <span class="s">`json:&#34;height,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="s">`json:&#34;image_info,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        A Category is a collection of pages pertaining to a topic.
                    </p>
                    <p class="q-p">
                        A page can belong to many categories. Category memberships and metadata are
                        stored in JSON manifests.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-category-addpage">
                        func (*Category) AddPage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cat</span> <span class="o">*</span><span class="nx">Category</span><span class="p">)</span> <span class="nf">AddPage</span><span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">,</span> <span class="nx">page</span> <span class="o">*</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">Page</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        AddPage adds a page to a category.
                    </p>
                    <p class="q-p">
                        If the page already belongs and any information has changed, the category is
                        updated. If force is true,
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-category-exists">
                        func (*Category) Exists
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cat</span> <span class="o">*</span><span class="nx">Category</span><span class="p">)</span> <span class="nf">Exists</span><span class="p">()</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        Exists returns whether a category currently exists.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-categoryentry">
                        type CategoryEntry
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CategoryEntry</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// time at which the page metadata in this category file was last updated.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this is compared against page file modification time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Asof</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;asof,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// embedded page info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// note this info is accurate only as of the Asof time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageInfo</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// for CategoryTypeImage, an array of image dimensions used on this page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// dimensions are guaranteed to be positive integers. the number of elements will
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// always be even, since each occurrence of the image produces two (width and then height)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Dimensions</span> <span class="p">[][]</span><span class="kt">int</span> <span class="s">`json:&#34;dimensions,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// for CategoryTypePage, an array of line numbers on which the tracked page is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// referenced on the page described by this entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Lines</span> <span class="p">[]</span><span class="kt">int</span> <span class="s">`json:&#34;lines,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        A CategoryEntry describes a page that belongs to a category.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-categoryinfo">
                        type CategoryInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CategoryInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">Category</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        CategoryInfo represents metadata associated with a category.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-categorytype">
                        type CategoryType
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CategoryType</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        CategoryType describes the type of a Category.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-commitopts">
                        type CommitOpts
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CommitOpts</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Comment is the commit description.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Comment</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Name is the fullname of the user committing changes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Email is the email address of the user committing changes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Email</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Time is the timestamp to associate with the revision.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// If unspecified, current time is used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Time</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        CommitOpts describes the options for a wiki revision.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-displaycategoryposts">
                        type DisplayCategoryPosts
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DisplayCategoryPosts</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// DisplayPage results
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// overrides the Category Pages field
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Pages</span> <span class="p">[]</span><span class="nx">DisplayPage</span> <span class="s">`json:&#34;pages,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// the page number (first page = 0)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PageN</span> <span class="kt">int</span> <span class="s">`json:&#34;page_n&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// the total number of pages
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">NumPages</span> <span class="kt">int</span> <span class="s">`json:&#34;num_pages&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// this is the combined CSS for all pages we&#39;re displaying
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CSS</span> <span class="kt">string</span> <span class="s">`json:&#34;css,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// all other fields are inherited from the category itself
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">*</span><span class="nx">Category</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayCategoryPosts represents a category result to display.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-displayerror">
                        type DisplayError
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DisplayError</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// a human-readable error string. sensitive info is never
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// included, so this may be shown to users
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Error</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// a more detailed human-readable error string that MAY contain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// sensitive data. can be used for debugging and logging but should
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// not be presented to users
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">DetailedError</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// HTTP status code. if zero, 404 should be used
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Status</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// if the error occurred during parsing, this is the position.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// for all non-parsing errors, this is 0:0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Position</span> <span class="nx">wikifier</span><span class="p">.</span><span class="nx">Position</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if the content cannot be displayed because it has
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// not yet been published for public access
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Draft</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayError represents an error result to display.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-displayfile">
                        type DisplayFile
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DisplayFile</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// file name relative to wiki root.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// path delimiter &#39;/&#39; is always used, regardless of OS.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">File</span> <span class="kt">string</span> <span class="s">`json:&#34;file,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// absolute file path of the file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// OS-specific path delimiter is used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Path</span> <span class="kt">string</span> <span class="s">`json:&#34;path,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// the plain text file content
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Content</span> <span class="kt">string</span> <span class="s">`json:&#34;-&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the file was last modified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Modified</span> <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// for pages/models/etc, parser warnings and error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Warnings</span> <span class="p">[]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">Warning</span> <span class="s">`json:&#34;parse_warnings,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Error</span>    <span class="o">*</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">Warning</span>  <span class="s">`json:&#34;parse_error,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayFile represents a plain text file to display.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-displayimage">
                        type DisplayImage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DisplayImage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// basename of the scaled image file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">File</span> <span class="kt">string</span> <span class="s">`json:&#34;file,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// absolute path to the scaled image.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this file should be served to the user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Path</span> <span class="kt">string</span> <span class="s">`json:&#34;path,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// absolute path to the full-size image.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if the full-size image is being displayed, same as Path
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FullsizePath</span> <span class="kt">string</span> <span class="s">`json:&#34;fullsize_path,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// image type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// &#39;png&#39; or &#39;jpeg&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ImageType</span> <span class="kt">string</span> <span class="s">`json:&#34;image_type,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// mime &#39;image/png&#39; or &#39;image/jpeg&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// suitable for the Content-Type header
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Mime</span> <span class="kt">string</span> <span class="s">`json:&#34;mime,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// bytelength of image data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// suitable for use in the Content-Length header
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Length</span> <span class="kt">int64</span> <span class="s">`json:&#34;length,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the image was last modified.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if Generated is true, this is the current time.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if FromCache is true, this is the modified date of the cache file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// otherwise, this is the modified date of the image file itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Modified</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ModifiedHTTP</span> <span class="kt">string</span>     <span class="s">`json:&#34;modified_http,omitempty&#34;`</span> <span class="c1">// HTTP format for Last-Modified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// true if the content being sered was read from a cache file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// opposite of Generated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FromCache</span> <span class="kt">bool</span> <span class="s">`json:&#34;cached,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if the content being served was just generated.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// opposite of FromCache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Generated</span> <span class="kt">bool</span> <span class="s">`json:&#34;generated,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if the content generated in order to fulfill this request was
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// written to cache. this can only been true when Generated is true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CacheGenerated</span> <span class="kt">bool</span> <span class="s">`json:&#34;cache_gen,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayImage represents an image to display.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-displaypage">
                        type DisplayPage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DisplayPage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// basename of the page, with the extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">File</span> <span class="kt">string</span> <span class="s">`json:&#34;file,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// basename of the page, without the extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// absolute file path of the page
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Path</span> <span class="kt">string</span> <span class="s">`json:&#34;path,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// the page content (HTML)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Content</span> <span class="nx">wikifier</span><span class="p">.</span><span class="nx">HTML</span> <span class="s">`json:&#34;-&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the page was last modified.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if Generated is true, this is the current time.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// if FromCache is true, this is the modified date of the cache file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// otherwise, this is the modified date of the page file itself.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Modified</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ModifiedHTTP</span> <span class="kt">string</span>     <span class="s">`json:&#34;modified_http,omitempty&#34;`</span> <span class="c1">// HTTP formatted for Last-Modified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// CSS generated for the page from style{} blocks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CSS</span> <span class="kt">string</span> <span class="s">`json:&#34;css,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if this content was read from a cache file. opposite of Generated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FromCache</span> <span class="kt">bool</span> <span class="s">`json:&#34;cached,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if the content being served was just generated on the fly.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// opposite of FromCache
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Generated</span> <span class="kt">bool</span> <span class="s">`json:&#34;generated,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if this request resulted in the writing of a new cache file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this can only be true if Generated is true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CacheGenerated</span> <span class="kt">bool</span> <span class="s">`json:&#34;cache_gen,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if this request resulted in the writing of a text file.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this can only be true if Generated is true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">TextGenerated</span> <span class="kt">bool</span> <span class="s">`json:&#34;text_gen,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// true if the page has not yet been published for public viewing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this only occurs when it is specified that serving drafts is OK,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// since normally a draft page instead results in a DisplayError.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Draft</span> <span class="kt">bool</span> <span class="s">`json:&#34;draft,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// warnings and errors produced by the parser
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Warnings</span> <span class="p">[]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">Warning</span> <span class="s">`json:&#34;warnings,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// time when the page was created, as extracted from
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// the special @page.created variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Created</span>     <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;created,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CreatedHTTP</span> <span class="kt">string</span>     <span class="s">`json:&#34;created_http,omitempty&#34;`</span> <span class="c1">// HTTP formatted
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// name of the page author, as extracted from the special @page.author
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Author</span> <span class="kt">string</span> <span class="s">`json:&#34;author,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// list of categories the page belongs to, without the &#39;.cat&#39; extension
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Categories</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`json:&#34;categories,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// page title as extracted from the special @page.title variable, including
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// any possible HTML-encoded formatting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FmtTitle</span> <span class="nx">wikifier</span><span class="p">.</span><span class="nx">HTML</span> <span class="s">`json:&#34;fmt_title,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// like FmtTitle except that all text formatting has been stripped.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// suitable for use in the &lt;title&gt; tag
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Title</span> <span class="kt">string</span> <span class="s">`json:&#34;title,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// page description as extracted from the special @page.desc variable.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Description</span> <span class="kt">string</span> <span class="s">`json:&#34;desc,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// page keywords as extracted from the special @page.keywords variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Keywords</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`json:&#34;keywords,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayPage represents a page result to display.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-displayredirect">
                        type DisplayRedirect
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DisplayRedirect</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// a relative or absolute URL to which the request should redirect,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// suitable for use in a Location header
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Redirect</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayRedirect represents a page redirect to follow.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-imageinfo">
                        type ImageInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ImageInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">File</span>       <span class="kt">string</span>     <span class="s">`json:&#34;file&#34;`</span>               <span class="c1">// filename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Width</span>      <span class="kt">int</span>        <span class="s">`json:&#34;width,omitempty&#34;`</span>    <span class="c1">// full-size width
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Height</span>     <span class="kt">int</span>        <span class="s">`json:&#34;height,omitempty&#34;`</span>   <span class="c1">// full-size height
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Created</span>    <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;created,omitempty&#34;`</span>  <span class="c1">// creation time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Modified</span>   <span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;modified,omitempty&#34;`</span> <span class="c1">// modify time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Dimensions</span> <span class="p">[][]</span><span class="kt">int</span>    <span class="s">`json:&#34;-&#34;`</span>                  <span class="c1">// dimensions used throughout the wiki
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        ImageInfo represents a full-size image on the wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-sizedimage">
                        type SizedImage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SizedImage</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// for example mydir/100x200-myimage@3x.png
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Width</span><span class="p">,</span> <span class="nx">Height</span> <span class="kt">int</span>    <span class="c1">// 100, 200 (dimensions as requested)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Scale</span>         <span class="kt">int</span>    <span class="c1">// 3 (scale as requested)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Prefix</span>        <span class="kt">string</span> <span class="c1">// mydir
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">RelNameNE</span>     <span class="kt">string</span> <span class="c1">// myimage (name without extension)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Ext</span>           <span class="kt">string</span> <span class="c1">// png (extension)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        SizedImage represents an image in specific dimensions.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--sizedimagefromname">
                        func  SizedImageFromName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">SizedImageFromName</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">SizedImage</span>
</span></span></pre>
                    <p class="q-p">
                        SizedImageFromName returns a SizedImage given an image name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-sizedimage-fullsizename">
                        func (SizedImage) FullSizeName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="nf">FullSizeName</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        FullSizeName returns the name of the full-size image.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-sizedimage-scalename">
                        func (SizedImage) ScaleName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="nf">ScaleName</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        ScaleName returns the image name with dimensions and scale.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-sizedimage-trueheight">
                        func (SizedImage) TrueHeight
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="nf">TrueHeight</span><span class="p">()</span> <span class="kt">int</span>
</span></span></pre>
                    <p class="q-p">
                        TrueHeight returns the actual image height when the Scale is taken into
                        consideration.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-sizedimage-truename">
                        func (SizedImage) TrueName
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="nf">TrueName</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        TrueName returns the image name with true dimensions.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-sizedimage-truenamene">
                        func (SizedImage) TrueNameNE
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="nf">TrueNameNE</span><span class="p">()</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        TrueNameNE is like TrueName but without the extension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-sizedimage-truewidth">
                        func (SizedImage) TrueWidth
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="nf">TrueWidth</span><span class="p">()</span> <span class="kt">int</span>
</span></span></pre>
                    <p class="q-p">
                        TrueWidth returns the actual image width when the Scale is taken into
                        consideration.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-sortfunc">
                        type SortFunc
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SortFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">Sortable</span><span class="p">)</span> <span class="kt">bool</span>
</span></span></pre>
                    <p class="q-p">
                        SortFunc is a type for functions that can sort items.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-sortinfo">
                        type SortInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SortInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Title</span>      <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Author</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Created</span>    <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Modified</span>   <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Dimensions</span> <span class="p">[]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        SortInfo is the data returned from Sortable items for sorting wiki resources.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-sortable">
                        type Sortable
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Sortable</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">SortInfo</span><span class="p">()</span> <span class="nx">SortInfo</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        Sortable is the interface that allows quiki to sort wiki resources.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-type-wiki">
                        type Wiki
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Wiki</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ConfigFile</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Opt</span>        <span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageOpt</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Auth</span>       <span class="o">*</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Authenticator</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></pre>
                    <p class="q-p">
                        A Wiki represents a quiki website.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newwiki">
                        func  NewWiki
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewWiki</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Wiki</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        NewWiki creates a Wiki given its directory path.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func--newwikiconfig">
                        func  NewWikiConfig
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewWikiConfig</span><span class="p">(</span><span class="nx">confPath</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Wiki</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        NewWikiConfig creates a Wiki given the configuration file path.
                    </p>
                    <p class="q-p">
                        Deprecated: Use NewWiki instead.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-absfilepath">
                        func (*Wiki) AbsFilePath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">AbsFilePath</span><span class="p">(</span><span class="nx">relPath</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        AbsFilePath takes a relative path to a file within the wiki (e.g.
                        <code>pages/mypage.page</code>), joins it with the wiki directory, and evaluates it with
                        <code>filepath.Abs()</code>. The result is an absolute path which may or may not exist.
                    </p>
                    <p class="q-p">
                        If the file is a symlink, it is followed. Thus, it is possible for the resulting
                        path to exist outside the wiki directory. If that is not desired, use
                        unresolvedAbsFilePath instead.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-branch">
                        func (*Wiki) Branch
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Branch</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Wiki</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        Branch returns a Wiki instance for this wiki at another branch. If the branch
                        does not exist, an error is returned.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-branchnames">
                        func (*Wiki) BranchNames
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">BranchNames</span><span class="p">()</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        BranchNames returns the revision branches available.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-categories">
                        func (*Wiki) Categories
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Categories</span><span class="p">()</span> <span class="p">[]</span><span class="nx">CategoryInfo</span>
</span></span></pre>
                    <p class="q-p">
                        Categories returns info about all the models in the wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-categoriessorted">
                        func (*Wiki) CategoriesSorted
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">CategoriesSorted</span><span class="p">(</span><span class="nx">descend</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">sorters</span> <span class="o">...</span><span class="nx">SortFunc</span><span class="p">)</span> <span class="p">[]</span><span class="nx">CategoryInfo</span>
</span></span></pre>
                    <p class="q-p">
                        CategoriesSorted returns info about all the categories in the wiki, sorted as
                        specified. Accepted sort functions are SortTitle, SortCreated, and SortModified.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-categoryinfo">
                        func (*Wiki) CategoryInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">CategoryInfo</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">info</span> <span class="nx">CategoryInfo</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        CategoryInfo is an inexpensive request for info on a category.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-categorymap">
                        func (*Wiki) CategoryMap
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">CategoryMap</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">CategoryInfo</span>
</span></span></pre>
                    <p class="q-p">
                        CategoryMap returns a map of model name to CategoryInfo for all models in the
                        wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-debug">
                        func (*Wiki) Debug
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Debug</span><span class="p">(</span><span class="nx">i</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span>
</span></span></pre>
                    <p class="q-p">
                        Debug logs debug info for a wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-debugf">
                        func (*Wiki) Debugf
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Debugf</span><span class="p">(</span><span class="nx">format</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">i</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span>
</span></span></pre>
                    <p class="q-p">
                        Debugf logs debug info for a wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-dir">
                        func (*Wiki) Dir
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Dir</span><span class="p">(</span><span class="nx">dirs</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        Dir returns the absolute path to the resolved wiki directory. If the wiki
                        directory is a symlink, it is followed.
                    </p>
                    <p class="q-p">
                        Optional path components can be passed as arguments to be joined with the wiki
                        root by the path separator.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displaycategoryposts">
                        func (*Wiki) DisplayCategoryPosts
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplayCategoryPosts</span><span class="p">(</span><span class="nx">catName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">pageN</span> <span class="kt">int</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayCategoryPosts returns the display result for a category.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displayfile">
                        func (*Wiki) DisplayFile
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplayFile</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayFile returns the display result for a plain text file.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displayimage">
                        func (*Wiki) DisplayImage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplayImage</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayImage returns the display result for an image.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displaypage">
                        func (*Wiki) DisplayPage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplayPage</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayPage returns the display result for a page.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displaypagedraft">
                        func (*Wiki) DisplayPageDraft
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplayPageDraft</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">draftOK</span> <span class="kt">bool</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplayPageDraft returns the display result for a page.
                    </p>
                    <p class="q-p">
                        Unlike DisplayPage, if draftOK is true, the content is served even if it is
                        marked as draft.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displaysizedimage">
                        func (*Wiki) DisplaySizedImage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplaySizedImage</span><span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplaySizedImage returns the display result for an image in specific
                        dimensions.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-displaysizedimagegenerate">
                        func (*Wiki) DisplaySizedImageGenerate
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">DisplaySizedImageGenerate</span><span class="p">(</span><span class="nx">img</span> <span class="nx">SizedImage</span><span class="p">,</span> <span class="nx">generateOK</span> <span class="kt">bool</span><span class="p">)</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span></pre>
                    <p class="q-p">
                        DisplaySizedImageGenerate returns the display result for an image in specific
                        dimensions and allows images to be generated in any dimension.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-findpage">
                        func (*Wiki) FindPage
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">FindPage</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">Page</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        FindPage attempts to find a page on this wiki given its name, regardless of the
                        file format or filename case.
                    </p>
                    <p class="q-p">
                        If a page by this name exists, the returned page represents it. Otherwise, a new
                        page representing the lowercased, normalized .page file is returned in the
                        standard quiki filename format.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-getcategory">
                        func (*Wiki) GetCategory
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">GetCategory</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Category</span>
</span></span></pre>
                    <p class="q-p">
                        GetCategory loads or creates a category.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-getspecialcategory">
                        func (*Wiki) GetSpecialCategory
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">GetSpecialCategory</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">typ</span> <span class="nx">CategoryType</span><span class="p">)</span> <span class="o">*</span><span class="nx">Category</span>
</span></span></pre>
                    <p class="q-p">
                        GetSpecialCategory loads or creates a special category given the type.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-imageinfo">
                        func (*Wiki) ImageInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">ImageInfo</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">info</span> <span class="nx">ImageInfo</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        ImageInfo returns info for an image given its full-size name.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-imagemap">
                        func (*Wiki) ImageMap
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">ImageMap</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">ImageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        ImageMap returns a map of image filename to ImageInfo for all images in the
                        wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-images">
                        func (*Wiki) Images
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Images</span><span class="p">()</span> <span class="p">[]</span><span class="nx">ImageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        Images returns info about all the images in the wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-imagessorted">
                        func (*Wiki) ImagesSorted
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">ImagesSorted</span><span class="p">(</span><span class="nx">descend</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">sorters</span> <span class="o">...</span><span class="nx">SortFunc</span><span class="p">)</span> <span class="p">[]</span><span class="nx">ImageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        ImagesSorted returns info about all the pages in the wiki, sorted as specified.
                        Accepted sort functions are SortTitle, SortAuthor, SortCreated, SortModified,
                        and SortDimensions.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-log">
                        func (*Wiki) Log
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Log</span><span class="p">(</span><span class="nx">i</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span>
</span></span></pre>
                    <p class="q-p">
                        Log logs info for a wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-logf">
                        func (*Wiki) Logf
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Logf</span><span class="p">(</span><span class="nx">format</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">i</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span>
</span></span></pre>
                    <p class="q-p">
                        Logf logs info for a wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-modelinfo">
                        func (*Wiki) ModelInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">ModelInfo</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">info</span> <span class="nx">wikifier</span><span class="p">.</span><span class="nx">ModelInfo</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        ModelInfo is an inexpensive request for info on a model. It uses cached metadata
                        rather than generating the model and extracting variables.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-modelmap">
                        func (*Wiki) ModelMap
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">ModelMap</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">ModelInfo</span>
</span></span></pre>
                    <p class="q-p">
                        ModelMap returns a map of model name to wikifier.ModelInfo for all models in the
                        wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-models">
                        func (*Wiki) Models
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Models</span><span class="p">()</span> <span class="p">[]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">ModelInfo</span>
</span></span></pre>
                    <p class="q-p">
                        Models returns info about all the models in the wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-modelssorted">
                        func (*Wiki) ModelsSorted
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">ModelsSorted</span><span class="p">(</span><span class="nx">descend</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">sorters</span> <span class="o">...</span><span class="nx">SortFunc</span><span class="p">)</span> <span class="p">[]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">ModelInfo</span>
</span></span></pre>
                    <p class="q-p">
                        ModelsSorted returns info about all the models in the wiki, sorted as specified.
                        Accepted sort functions are SortTitle, SortAuthor, SortCreated, and
                        SortModified.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-newbranch">
                        func (*Wiki) NewBranch
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">NewBranch</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Wiki</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        NewBranch is like Branch, except it creates the branch at the current master
                        revision if it does not yet exist.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-pageinfo">
                        func (*Wiki) PageInfo
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">PageInfo</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">info</span> <span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageInfo</span><span class="p">)</span>
</span></span></pre>
                    <p class="q-p">
                        PageInfo is an inexpensive request for info on a page. It uses cached metadata
                        rather than generating the page and extracting variables.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-pagemap">
                        func (*Wiki) PageMap
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">PageMap</span><span class="p">()</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        PageMap returns a map of page name to PageInfo for all pages in the wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-pages">
                        func (*Wiki) Pages
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Pages</span><span class="p">()</span> <span class="p">[]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        Pages returns info about all the pages in the wiki.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-pagessorted">
                        func (*Wiki) PagesSorted
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">PagesSorted</span><span class="p">(</span><span class="nx">descend</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">sorters</span> <span class="o">...</span><span class="nx">SortFunc</span><span class="p">)</span> <span class="p">[]</span><span class="nx">wikifier</span><span class="p">.</span><span class="nx">PageInfo</span>
</span></span></pre>
                    <p class="q-p">
                        PagesSorted returns info about all the pages in the wiki, sorted as specified.
                        Accepted sort functions are SortTitle, SortAuthor, SortCreated, and
                        SortModified.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-pregenerate">
                        func (*Wiki) Pregenerate
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">Pregenerate</span><span class="p">()</span>
</span></span></pre>
                    <p class="q-p">
                        Pregenerate simulates requests for all wiki resources such that content caches
                        can be pregenerated and stored.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-relpath">
                        func (*Wiki) RelPath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">RelPath</span><span class="p">(</span><span class="nx">absPath</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        RelPath takes an absolute file path and attempts to make it relative to the wiki
                        directory, regardless of whether the path exists.
                    </p>
                    <p class="q-p">
                        If the path can be made relative without following symlinks, this is preferred.
                        If that fails, symlinks in absPath are followed and a second attempt is made.
                    </p>
                    <p class="q-p">
                        In any case the path cannot be made relative to the wiki directory, an empty
                        string is returned.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-unresolvedabsfilepath">
                        func (*Wiki) UnresolvedAbsFilePath
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">UnresolvedAbsFilePath</span><span class="p">(</span><span class="nx">relPath</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span>
</span></span></pre>
                    <p class="q-p">
                        UnresolvedAbsFilePath takes a relative path to a file within the wiki (e.g.
                        <code>pages/mypage.page</code>) and joins it with the absolute path to the wiki directory.
                        The result is an absolute path which may or may not exist.
                    </p>
                    <p class="q-p">
                        Symlinks are not followed. If that is desired, use absoluteFilePath instead.
                    </p>
                </div>
                <div class="q-sec">
                    <h4 class="q-sec-title" id="qa-func-wiki-writefile">
                        func (*Wiki) WriteFile
                    </h4>
<pre class="q-code chroma"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">Wiki</span><span class="p">)</span> <span class="nf">WriteFile</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">content</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">createOK</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">commit</span> <span class="nx">CommitOpts</span><span class="p">)</span> <span class="kt">error</span>
</span></span></pre>
                    <p class="q-p">
                        WriteFile writes a file in the wiki.
                    </p>
                    <p class="q-p">
                        The filename must be relative to the wiki directory.
                    </p>
                    <p class="q-p">
                        If the file does not exist and createOK is false, an error is returned. If the
                        file exists and is a symbolic link, an error is returned.
                    </p>
                    <p class="q-p">
                        This is a low-level API that allows writing any file within the wiki directory,
                        so it should not be utilized directly by frontends. Use WritePage, WriteModel,
                        WriteImage, or WriteConfig instead.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
